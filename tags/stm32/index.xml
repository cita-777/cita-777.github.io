<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>STM32 on cita的博客__</title>
        <link>http://localhost:11263/tags/stm32/</link>
        <description>Recent content in STM32 on cita的博客__</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>cita</copyright>
        <lastBuildDate>Wed, 18 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:11263/tags/stm32/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>CubeMX下的freeRTOS</title>
        <link>http://localhost:11263/p/cubemx%E4%B8%8B%E7%9A%84freertos/</link>
        <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:11263/p/cubemx%E4%B8%8B%E7%9A%84freertos/</guid>
        <description>&lt;img src="http://localhost:11263/p/cubemx%E4%B8%8B%E7%9A%84freertos/background.jpg" alt="Featured image of post CubeMX下的freeRTOS" /&gt;&lt;div class=&#34;toc&#34;&gt; 
 &lt;h4&gt;&lt;a name=&#34;t0&#34;&gt;&lt;/a&gt;文章目录&lt;/h4&gt; 
 &lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#CubeMXFreeRTOS_1&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;CubeMX使用FreeRTOS编程指南&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#_3&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;一、开发前言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#11__5&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;1.1 软件准备&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#12_FreeRTOS_11&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;1.2 开启FreeRTOS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_19&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;二、配置界面&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_41&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;三、系统设置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#21__63&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.1 调度内核设置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#22__139&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.2 内存管理设置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#23__159&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.3 钩子函数配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#25__217&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.5 任务运行追踪配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#26__235&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.6 协程配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#27__252&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.7 软件定时器配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#28__276&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;2.8 中断优先级配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_286&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;三、内核裁剪&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_316&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;四、创建任务与队列&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#41_CubeMX__318&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;4.1 CubeMX 下任务创建与配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#42_CubeMX__370&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;4.2 CubeMX 下队列的创建与配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_522&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;五、创建定时器和信号量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#51_CubeMX_524&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;5.1 CubeMX下定时器的创建和配置&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#52_CubeMX_644&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;5.2 CubeMX下信号量的创建和配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_779&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;六、创建互斥量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#61_CubeMX_781&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;6.1 CubeMX下互斥量的创建和配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_900&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;七、创建事件标志组&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;#71_CubeMX_902&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;7.1 CubeMX下事件的创建和配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
   &lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_1036&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;八、用户常量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_1040&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;九、任务通知&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;#_1161&#34; rel=&#34;nofollow&#34; target=&#34;_self&#34;&gt;十、系统内核配置&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 
 &lt;/li&gt;&lt;/ul&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;a name=&#34;t1&#34;&gt;&lt;/a&gt;&lt;a id=&#34;CubeMXFreeRTOS_1&#34;&gt;&lt;/a&gt;CubeMX使用&lt;span class=&#34;words-blog hl-git-1&#34; data-tit=&#34;FreeRTOS&#34; data-pretit=&#34;freertos&#34;&gt;FreeRTOS&lt;/span&gt;编程指南&lt;/h2&gt; 
&lt;h3&gt;&lt;a name=&#34;t2&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_3&#34;&gt;&lt;/a&gt;一、开发前言&lt;/h3&gt; 
&lt;h4&gt;&lt;a name=&#34;t3&#34;&gt;&lt;/a&gt;&lt;a id=&#34;11__5&#34;&gt;&lt;/a&gt;1.1 软件准备&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt; &lt;p&gt;&lt;span class=&#34;words-blog hl-git-1&#34; data-tit=&#34;STM32CubeMX&#34; data-pretit=&#34;stm32cubemx&#34;&gt;STM32CubeMX&lt;/span&gt; 代码生成软件&lt;/p&gt; &lt;/li&gt;&lt;li&gt; &lt;p&gt;MDK 集成代码开发环境&lt;/p&gt; &lt;/li&gt;&lt;/ul&gt; 
&lt;h4&gt;&lt;a name=&#34;t4&#34;&gt;&lt;/a&gt;&lt;a id=&#34;12_FreeRTOS_11&#34;&gt;&lt;/a&gt;1.2 开启FreeRTOS&lt;/h4&gt; 
&lt;p&gt;新建一个 CubeMX 工程，在配置好时钟后，点击 Middleware -&amp;gt; 选择 FreeRTOS -&amp;gt; 下拉框选择 V2 版本 CMSIS&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/24fabb09f186bbab3045585e81c8ea65.png&#34; alt=&#34;20211006095622&#34;&gt;&lt;/p&gt; 
&lt;p&gt;到此在 CubeMX 中就已经开启 FreeRTOS 系统了，下面分享 FreeRTOS 的配置：&lt;/p&gt; 
&lt;h3&gt;&lt;a name=&#34;t5&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_19&#34;&gt;&lt;/a&gt;二、配置界面&lt;/h3&gt; 
&lt;p&gt;开启 FreeRTOS 之后，可以看到配置项主要分为以下几个部分&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c4258287182fb315742dbf4c5aa89eae.png&#34; alt=&#34;20211006100711&#34;&gt;&lt;/p&gt; 
&lt;p&gt;这几个部分的主要功能如下表：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&#34;center&#34;&gt;配置项&lt;/th&gt;&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Tasks and Queues&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;任务与队列，用于配置任务体以及消息队列；&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Timers and Semaphores&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;软件定时器与信号量，用于配置内核对象 （软件定时器和信号量）；&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Mutexes&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;互斥量，用于配置内核对象（互斥量）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;事件，配置内核对象（事件）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;FreeRTOS Heap Usage&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;查看用户任务和系统任务的堆占用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Config Parameters&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;系统的参数配置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Include Parameters&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;系统的功能裁剪&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Advanced Settings&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;CubeMX 生成代码预配置项&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&#34;center&#34;&gt;&lt;strong&gt;User Constants&lt;/strong&gt;&lt;/td&gt;&lt;td align=&#34;center&#34;&gt;用户常量定义&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;以上各个功能分的很清晰，我们需要配置什么功能就去对应的选项下进行配置，下面根据各个配置项进行详细配置介绍&lt;/p&gt; 
&lt;h3&gt;&lt;a name=&#34;t6&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_41&#34;&gt;&lt;/a&gt;三、系统设置&lt;/h3&gt; 
&lt;p&gt;首先我们先了解一下 Config Parameters，他的配置参数如下&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/4dbe2bf2e593496904a0b60019f88709.png&#34; alt=&#34;20211006181005&#34;&gt;&lt;/p&gt; 
&lt;p&gt;参数功能表：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;显示 FreeRTOS API 接口版本&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;显示 FreeRTOS 内核版本&lt;br&gt;显示 CMSIS 版本&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Kernel Setting&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;FreeRTOS 调度内核设置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Memory management setting&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;内存管理设置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Hook function related definitions&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;钩子函数有关定义&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Run time and task stats gathering related definitions&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;系统运行时的参数收集配置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Co-routine related definitions&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;协程配置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Software timer definitons&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;软件定时器任务配置&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Interrupt nesting behaviour configuration&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;中断优先级配置&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;API 和 Version 不过多解释，显示版本信息&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t7&#34;&gt;&lt;/a&gt;&lt;a id=&#34;21__63&#34;&gt;&lt;/a&gt;2.1 调度内核设置&lt;/h4&gt; 
&lt;p&gt;&lt;span class=&#34;words-blog hl-git-1&#34; data-tit=&#34;Kernel&#34; data-pretit=&#34;kernel&#34;&gt;Kernel&lt;/span&gt; Setting 是 FreeRTOS 的调度内核配置，展开后有下面的配置项，使用时一般保持默认，也可以根据需要修改&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/d00b7ef05fa75a0e5dc37f5e99a7a3e5.png&#34; alt=&#34;20211006182448&#34;&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_PREEMPTION&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;USE_PREEMPTION 是 &lt;strong&gt;RTOS 的调度方式选择，为 1 时使用抢占式调度器，为 0 时使用协程&lt;/strong&gt;，如果使用抢占式调度器的话内核会在每个时钟节拍中断中进行任务切换，当使用协程的话会在如下地方进行任务切换&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;一个任务调用了函数 taskYIELD()。&lt;/li&gt;&lt;li&gt;一个任务调用了可以使任务进入阻塞态的 API 函数。&lt;/li&gt;&lt;li&gt;应用程序明确定义了在中断中执行上下文切换。&lt;/li&gt;&lt;/ol&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;CPU_CLOCK_HZ&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;CPU_CLOCK_HZ 是 &lt;strong&gt;CPU 系统时钟频率&lt;/strong&gt;，默认使用的是晶振通过时钟树后获得的时钟频率&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;TICK_RATE_HZ&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;TICK_RATE_HZ 是 &lt;strong&gt;RTOS 的心跳时钟频率&lt;/strong&gt;，默认为最大值 1000 ，即心跳时钟 1ms 跳动一次&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;MAX_PRIORITIES&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;MAX_PRIORITIES 是 &lt;strong&gt;RTOS 任务的最高优先级设置&lt;/strong&gt;，默认56级，一般来说一个优先级表是32位，这里用了两个，对应64位，&lt;strong&gt;其中8位用于系统任务的优先级处理&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;MINIMAL_STACK_SIZE&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;MINIMAL_STACK_SIZE &lt;strong&gt;设置分配给空闲任务的堆栈大小&lt;/strong&gt;，该值是用字（32位）指定的，而不是字节，&lt;strong&gt;默认为128个字，如果修改过空闲任务，则根据实际情况修改&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;MAX_TASK_NAME_LEN&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;MAX_TASK_NAME_LEN 设置&lt;strong&gt;任务名称的最大字符数&lt;/strong&gt;，默认16位足够&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_16_BIT_TICKS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;USE_16_BIT_TICKS &lt;strong&gt;存放 Tick 周期的计数器的数字位宽&lt;/strong&gt;，默认为 Disable 即 16 位&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;IDLE_SHOULD_YIELD&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;如果IDLE_SHOULD_YIELD &lt;strong&gt;设置为0，则空闲任务永远不会让位于另一个任务&lt;/strong&gt;，只在被抢占时才会离开运行状态。如果 IDLE_SHOULD_YIELD &lt;strong&gt;设置为1，那么当有另一个空闲优先级任务处于Ready状态时，空闲任务将不会执行它定义的功能的不止一次迭代，而不会让位于另一个任务&lt;/strong&gt;，这确保当应用程序任务处于空闲状态时，在空闲任务中花费的时间最少，即同在空闲优先级下，空闲任务优先级更高，不会被抢占，不会以时间片运行&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_MUTEXES、USE_RECURSIVE_MUTEXES、USE_COUNTING_SEMAPHORES&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;为 1 则&lt;strong&gt;开启系统构建过程中的互斥量、递归互斥量和信号量&lt;/strong&gt;，该值强制为1（ENABLE）&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;QUEUE_REGISTRY_SIZE&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;队列注册表的大小，可以&lt;strong&gt;用于管理队列名称和队列实体，方便运行中进行查看与管理&lt;/strong&gt;，默认为8&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_APPLICATION_TASK_TAG&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能时会给任务一个 TAG 标签，便于用户进行使用&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;ENABLE_BACKWARD_COMPATIBILITY&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;一个兼容性使能，&lt;strong&gt;使能后， FreeRTOS 8.0.0 之后的版本可以通过宏定义使用 8.0.0 版本之前的函数接口&lt;/strong&gt;，默认使能&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_PORT_OPTIMISED_TASK_SELECTION&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;查找下一个任务方式的选择，查找下一个就绪任务就是查找优先级表，对优先级表进行导0算法&lt;/strong&gt;，&lt;strong&gt;分为通用切换或者针对性切换&lt;/strong&gt;，一般默认不使能，使用通用切换，通用切换使用C编写，执行效率低，兼容性高；针对性切换使用处理器自带的导0指令，使用汇编编写，切换效率高，但兼容性差&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_TICKLESS_IDLE&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后会生成的两个空函数PreSleepProcessing和PostSleepProcessing，用户可以编写代码进入低功耗模式，生成函数如下图&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/7452df99d4195c2026146158d3a89598.png&#34; alt=&#34;20211007081241&#34;&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_TASK_NOTIFICATIONS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;任务通知使能，&lt;strong&gt;每个RTOS任务都有一个32位的通知值，RTOS任务通知是一个直接发送给任务的事件，它可以解除接收任务的阻塞，并可选地更新接收任务的通知值&lt;/strong&gt;，为1开启，为0关闭，关闭可以为每个任务节省8个字节的内存空间&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;RECORD_STACK_HIGH_ADDRESS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;记录任务的堆栈入口地址到TCB&lt;/strong&gt;，为1使能，为0关闭&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t8&#34;&gt;&lt;/a&gt;&lt;a id=&#34;22__139&#34;&gt;&lt;/a&gt;2.2 &lt;a href=&#34;https://edu.csdn.net/cloud/houjie?utm_source=highword&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; class=&#34;hl hl-1&#34; data-report-click=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7020&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;https://edu.csdn.net/cloud/houjie?utm_source=highword&amp;amp;spm=1001.2101.3001.7020&amp;quot;,&amp;quot;extra&amp;quot;:&amp;quot;{\&amp;quot;word\&amp;quot;:\&amp;quot;内存管理\&amp;quot;}&amp;quot;}&#34; data-tit=&#34;内存管理&#34; data-pretit=&#34;内存管理&#34;&gt;内存管理&lt;/a&gt;设置&lt;/h4&gt; 
&lt;p&gt;内存管理可以看到3个配置参数&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/76585a90b8aec4ceb3ff757ba5e23aae.png&#34; alt=&#34;20211006224158&#34;&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Memory Allocation&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;内存分配方式，此处&lt;strong&gt;默认动态和静态都可以&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;TOTAL_HEAP_SIZE&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;&lt;strong&gt;内存堆的分配大小&lt;/strong&gt;，堆本质上就是一个数组，此处是设置堆数组的大小，设置时要考虑最小要满足所有任务的使用要求，最大不要超过系统的分配上限&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Memory Management scheme&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;内存分配方式，有heap_1.c, heap_2.c, heap_3.c, heap_4.c and heap5.c 5种，其中&lt;strong&gt;1、2、4、5都是先建立一个堆数组，从数组中申请，用完再释放，与C语言中molloc和free使用链表的方式不同，该方式在 MCU 中更安全稳定&lt;/strong&gt;，此处默认使用的方式4，具体申请释放方式可以在heap4.c中阅读到&lt;/p&gt; 
&lt;p&gt;关于堆和栈的区别，可以阅读我的另外一篇文章进行了解：&lt;a href=&#34;https://blog.csdn.net/qq_45396672/article/details/119155585&#34;&gt;C语言：内存四区&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t9&#34;&gt;&lt;/a&gt;&lt;a id=&#34;23__159&#34;&gt;&lt;/a&gt;2.3 钩子函数配置&lt;/h4&gt; 
&lt;p&gt;&lt;strong&gt;钩子函数是一种回调函数，用于在任务执行一次之后或者某些事件发生后执行的函数&lt;/strong&gt;，该配置项里面有五个选项，控制5种不同功能的钩子函数开启，当然用户也可以在代码中自己定义&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_IDLE_HOOK&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后，系统生成一个空回调函数，由用户编写函数主体&lt;/p&gt; 
&lt;pre data-index=&#34;0&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vApplicationIdleHook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;每当空闲任务执行一次，钩子函数都会被执行一次&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_TICK_HOOK&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后，系统生成一个空回调函数，由用户编写函数主体&lt;/p&gt; 
&lt;pre data-index=&#34;1&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vApplicationTickHook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;每个TICK周期，钩子函数都会执行一次&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_MALLOC_FAILED_HOOK&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后，系统生成一个空回调函数，由用户编写函数主体&lt;/p&gt; 
&lt;pre data-index=&#34;2&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vApplicationMallocFailedHook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;当申请动态内存失败时，钩子函数会执行一次&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_DAEMON_TASK_STARTUP_HOOK&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后，系统生成一个空回调函数，由用户编写函数主体&lt;/p&gt; 
&lt;pre data-index=&#34;3&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vApplicationDaemonTaskStartupHook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;任务刚启动时，钩子函数会执行一次&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;CHECK_FOR_STACK_OVERFLOW&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后，系统生成一个空回调函数，由用户编写函数主体&lt;/p&gt; 
&lt;pre data-index=&#34;4&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vApplicationStackOverflowHook&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; xTaskHandle xTask&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;signed&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pcTaskName &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;任务栈溢出时，钩子函数会执行一次，传入任务 TCB 和任务名称&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;当我们在 CubeMX 里面开启对应钩子函数，生成代码之后，在FreeRTOS就可以看到自动生成的钩子函数，我们在里面编写相应的功能就行&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/1e78f3a061420b8ed173622095bd7d32.png&#34; alt=&#34;20211007080910&#34;&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t10&#34;&gt;&lt;/a&gt;&lt;a id=&#34;25__217&#34;&gt;&lt;/a&gt;2.5 任务运行追踪配置&lt;/h4&gt; 
&lt;p&gt;功能配置项如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/6cf405c5a10ed591a52f566776112561.png&#34; alt=&#34;20211007081447&#34;&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;GENERATE_RUN_TIME_STATS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;开启时间统计功能，在调用 vTaskGetRunTimeStats() 函数时，&lt;strong&gt;将任务运行时间信息保存到可读列表中&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_TRACE_FACILITY&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后会包含额外的结构成员和函数以帮助执行可视化和跟踪，&lt;strong&gt;默认开启，方便 MDK 软件工具调试使用&lt;/strong&gt;&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_STATS_FORMATTING_FUNCTIONS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;使能后会&lt;strong&gt;生成 vTaskList() 和 vTaskGetRunTimeStats() 函数用于获取任务运行状态&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t11&#34;&gt;&lt;/a&gt;&lt;a id=&#34;26__235&#34;&gt;&lt;/a&gt;2.6 协程配置&lt;/h4&gt; 
&lt;p&gt;Co-routine related definitions 是协程的配置项，&lt;strong&gt;两个选项用来配置协程是否开启，以及协程的优先级&lt;/strong&gt;，开启后，需要用户手动创建协程，在协程几乎很少用到了，是 FreeRTOS目前还没有把协程移除的计划，但 FreeRTOS是不会再更新和维护协程了，因此大家解一下就行&lt;/p&gt; 
&lt;p&gt;协程特点：&lt;/p&gt; 
&lt;ol&gt;&lt;li&gt;堆栈使用&lt;br&gt; 所有的协程使用同一个堆栈(如果是任务的话每个任务都有自己的堆栈)，这样就比使用任务消耗更少的 RAM&lt;/li&gt;&lt;li&gt;调度器和优先级&lt;br&gt; 协程使用合作式的调度器，但是可以在使用抢占式的调度器中使用协程&lt;/li&gt;&lt;li&gt;宏实现&lt;br&gt; 协程是通过宏定义来实现的&lt;/li&gt;&lt;li&gt;使用限制&lt;br&gt; 为了降低对 RAM 的消耗做了很多的限制&lt;/li&gt;&lt;/ol&gt; 
&lt;p&gt;具体 API 接口和调度原理可以参考这篇文章 : &lt;a href=&#34;https://blog.csdn.net/lushoumin/article/details/88423621&#34;&gt;FreeRTOS协程&lt;/a&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t12&#34;&gt;&lt;/a&gt;&lt;a id=&#34;27__252&#34;&gt;&lt;/a&gt;2.7 软件定时器配置&lt;/h4&gt; 
&lt;p&gt;软件定时器配置的一些相关项如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/b11299c8e377959b404b6fd3efcb4e9b.png&#34; alt=&#34;20211007084642&#34;&gt;&lt;/p&gt; 
&lt;p&gt;这四个配置项主要与软件定时器处理任务有关，&lt;strong&gt;软件定时器任务属于系统任务（守护线程）&lt;/strong&gt;，开启软件定时器后用于维护软件定时器&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;USE_TIMERS&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;默认开启软件定时器任务&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;TIMER_TASK_PRIORITY&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;软件定时器任务优先级&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;TIMER_QUEUE_LENGTH&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;定时器&lt;strong&gt;任务队列长度&lt;/strong&gt;，&lt;strong&gt;FreeRTOS 是通过队列来发送控制命令给定时器任务&lt;/strong&gt;，叫做定时器命令队列，此处设置队列长度&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;TIMER_TASK_STACK_DEPTH&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;软件定时器&lt;strong&gt;任务堆栈大小&lt;/strong&gt;&lt;/p&gt; 
&lt;h4&gt;&lt;a name=&#34;t13&#34;&gt;&lt;/a&gt;&lt;a id=&#34;28__276&#34;&gt;&lt;/a&gt;2.8 中断优先级配置&lt;/h4&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;LIBRARY_LOWEST_INTERRUPT_PRIORITY&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;此宏是&lt;strong&gt;用来设置最低优先级&lt;/strong&gt;，FreeRTOS 使用的4位优先级，对应16位优先级，对应的最低优先级为15&lt;/p&gt; 
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;LIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt; 
&lt;p&gt;设置FreeRTOS 系统可管理的最大优先级，也就是&lt;strong&gt;设置阈值优先级&lt;/strong&gt;，这个大家可以自由设置，&lt;strong&gt;这里设置为5，也就是高于5 的优先级(优先级数小于5)不归 FreeRTOS 管理&lt;/strong&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a name=&#34;t14&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_286&#34;&gt;&lt;/a&gt;三、内核裁剪&lt;/h3&gt; 
&lt;p&gt;Include Parameters 下的选项应用于内核裁剪，裁剪不必要的功能，精简系统功能，减少资源占用，主要有以下几个选项：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/cd675f22b3a82b26aee0c648dac42299.png&#34; alt=&#34;20211007095602&#34;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;配置项可裁剪的函数功能如下：&lt;/strong&gt;&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;选项&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;vTaskPrioritySet&lt;/td&gt;&lt;td&gt;改变某个任务的任务优先级。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;uxTaskPriorityGet&lt;/td&gt;&lt;td&gt;查询某个任务的优先级。&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vTaskDelete&lt;/td&gt;&lt;td&gt;删除任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vTaskCleanUpResources&lt;/td&gt;&lt;td&gt;回收任务删除后的资源如RAM等等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vTaskSuspend&lt;/td&gt;&lt;td&gt;挂起任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vTaskDelayUntil&lt;/td&gt;&lt;td&gt;阻塞延时一段绝对时间（绝对延时去去除程序执行时间，执行更精准）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;vTaskDelay&lt;/td&gt;&lt;td&gt;阻塞延时一段相对时间&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTaskGetSchedulerState&lt;/td&gt;&lt;td&gt;获取任务调度器的状态，开启或未开启&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTaskResumeFromISR&lt;/td&gt;&lt;td&gt;在中断服务函数中恢复一个任务的运行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xQueueGetMutexHolder&lt;/td&gt;&lt;td&gt;获取信号量的队列拥有者，返回拥有此信号量的队列&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xSemaphoreGetMutexHolder&lt;/td&gt;&lt;td&gt;查询拥有互斥锁的任务，返回任务控制块&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;pcTaskGetTaskName&lt;/td&gt;&lt;td&gt;获取任务名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;uxTaskGetStackHighWaterMark&lt;/td&gt;&lt;td&gt;获取任务的堆栈的历史剩余最小值，FreeRTOS 中叫做“高水位线”&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTaskGetCurrentTaskHandle&lt;/td&gt;&lt;td&gt;此函数用于获取当前任务的任务句柄，就是获取当前任务控制块&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;eTaskGetState&lt;/td&gt;&lt;td&gt;此函数用于查询某个任务的运行壮态，比如：运行态、阻塞态、挂起态、就绪态等&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xEventGroupSetBitFromISR&lt;/td&gt;&lt;td&gt;在中断服务函数中将指定的事件位清零&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTimerPendFunctionCall&lt;/td&gt;&lt;td&gt;定时器守护任务的回调函数（定时器守护任务使用到一个命令队列，只要向队列发送信号就可以执行相应代码，可以实现“中断推迟处理”功能）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTaskAbortDelay&lt;/td&gt;&lt;td&gt;中止延时函数，该函数能立即解除任务的阻塞状态，将任务插入就绪列表中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;xTaskGetHandle&lt;/td&gt;&lt;td&gt;此函数根据任务名字获取的任务句柄（控制块）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;h3&gt;&lt;a name=&#34;t15&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_316&#34;&gt;&lt;/a&gt;四、创建任务与队列&lt;/h3&gt; 
&lt;h4&gt;&lt;a name=&#34;t16&#34;&gt;&lt;/a&gt;&lt;a id=&#34;41_CubeMX__318&#34;&gt;&lt;/a&gt;4.1 CubeMX 下任务创建与配置&lt;/h4&gt; 
&lt;p&gt;任务（线程）是操作系统运行的基本单元，也是资源分配的基本单元， CubeMX 任务的创建基本以图形化进行，配置方式如下&lt;/p&gt; 
&lt;p&gt;进入Tashs and Queues 配置，点击 Add 添加新任务&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/dd5dcd50ca389448091ebfd17aed4c7e.png&#34; alt=&#34;20211008215753&#34;&gt;&lt;/p&gt; 
&lt;p&gt;任务配置参数介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Task Name&lt;/td&gt;&lt;td&gt;任务名称，保存在 TCB 结构体中，设置时自己起名字&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Priority&lt;/td&gt;&lt;td&gt;任务优先级，任务的调度等级，根据自己创建任务的紧急程度设定&lt;br&gt;比如通信任务不能被打断，可以设计较高优先级&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Stack Size（Words）&lt;/td&gt;&lt;td&gt;设定给任务分配的内存大小，单位是字，对于32位单片机来说占4个字节&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Entry Function&lt;/td&gt;&lt;td&gt;任务实体，即任务的运行函数名&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Code Generation&lt;/td&gt;&lt;td&gt;代码生成模式&lt;br&gt;As weak： 产生一个用 __weak 修饰的弱定义任务函数，用户可自己在进行定义；&lt;br&gt;As external： 产生一个外部引用的任务函数，用户需要自己定义该函数；&lt;br&gt;Default： 产生一个默认格式的任务函数，用户需要在该函数内实现自己的功能&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Parameter:&lt;/td&gt;&lt;td&gt;传入的参数，保持默认就行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation:&lt;/td&gt;&lt;td&gt;内存分配方式&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;设置完成后点击OK，配置就完成了，之后生成代码，使用 MDK 进一步配置任务的具体信息&lt;/p&gt; 
&lt;p&gt;在生成的代码中，我们打开 freertos.c 文件可以在代码中看到任务的配置信息&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/e6ecac30971bf50da693e1080ab6d626.png&#34; alt=&#34;20211009123942&#34;&gt;&lt;/p&gt; 
&lt;p&gt;在 freertos.c 文件的末尾部分，我们可以看到生成的任务实体&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/0f6e9b3854b47cee14056d8aace2eefe.png&#34; alt=&#34;20211009124134&#34;&gt;&lt;/p&gt; 
&lt;p&gt;任务实体本身就是一个死循环函数，循环执行程序代码，但循环体代码里面必须要有延时函数，释放当前任务对 MCU 的控制权，使其他低优先级可以执行，此外，关于任务，CubeMX 提供了一系列的用户调用接口函数，具体如下&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osThreadNew&lt;/td&gt;&lt;td&gt;创建新任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*osThreadGetName&lt;/td&gt;&lt;td&gt;获取任务名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetId&lt;/td&gt;&lt;td&gt;获取当前任务的控制块（TCB）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetState&lt;/td&gt;&lt;td&gt;获取当前任务的运行状态&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetStackSize&lt;/td&gt;&lt;td&gt;获取任务的堆栈大小&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetStackSpace&lt;/td&gt;&lt;td&gt;获取任务剩余的堆栈大小&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadSetPriority&lt;/td&gt;&lt;td&gt;设定任务优先级&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetPriority&lt;/td&gt;&lt;td&gt;获取任务优先级&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadYield&lt;/td&gt;&lt;td&gt;切换控制权给下一个任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadSuspend&lt;/td&gt;&lt;td&gt;挂起任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadResume&lt;/td&gt;&lt;td&gt;恢复任务（挂起多少次恢复多少次）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadDetach&lt;/td&gt;&lt;td&gt;分离任务，方便任务结束进行回收&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadJoin&lt;/td&gt;&lt;td&gt;等待指定的任务停止&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadExit&lt;/td&gt;&lt;td&gt;停止当前任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadTerminate&lt;/td&gt;&lt;td&gt;停止指定任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadGetCount&lt;/td&gt;&lt;td&gt;获取激活的任务数量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadEnumerate&lt;/td&gt;&lt;td&gt;列举激活的任务&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;h4&gt;&lt;a name=&#34;t17&#34;&gt;&lt;/a&gt;&lt;a id=&#34;42_CubeMX__370&#34;&gt;&lt;/a&gt;4.2 CubeMX 下队列的创建与配置&lt;/h4&gt; 
&lt;p&gt;队列，又称为消息队列，用于任务间的数据通信，传输数据，在操作系统里面，直接使用全局变量传输数据十分危险，看似正常运行，但不知道啥时候就会因为寄存器或者内存等等原因引起崩溃，所以引入消息，队列的概念，任务发送数据到队列，需要接受消息的任务挂起在队列的挂起列表，等待消息的到来，CubeMX 创建队列的步骤如下：&lt;/p&gt; 
&lt;p&gt;先点击 Add 添加队列&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/62dc4e476ad69b3d2eb16fc2a5319aad.png&#34; alt=&#34;20211008221618&#34;&gt;&lt;/p&gt; 
&lt;p&gt;队列配置参数介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Queue Name&lt;/td&gt;&lt;td&gt;队列名称（自己设定）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Queue Size&lt;/td&gt;&lt;td&gt;消息队列大小&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Item Size&lt;/td&gt;&lt;td&gt;队列传输类型，保持默认16 位就行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;队列内存的分配方式&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;配置需要的参数后，点击OK，然后生成代码&lt;/p&gt; 
&lt;p&gt;生成代码后，我们可以在 freertos.c 中系统初始话函数中看到队列的初始化&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/505aa92488c07f23b4e40bf4a076f231.png&#34; alt=&#34;20211009130435&#34;&gt;&lt;/p&gt; 
&lt;p&gt;初始化函数会在一开始被调用，对 FreeRTOS 系统和内核对象进行初始化，初始化后系统就可以进行调度和使用内核对象，CubeMX 生成的代码自动将创建的内核对象放到初始化函数内，所以我们在任务和中断中直接使用就可以，队列的 FreeRTOS API 接口在CubeMX 内再次进行了封装，使用更加简单，使用方式如下：&lt;/p&gt; 
&lt;p&gt;我们使用的 CMSIS 2.0 版本，所以在任务文件中包含调用声明头文件&lt;/p&gt; 
&lt;pre data-index=&#34;5&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;cmsis_os2.h&#34;&lt;/span&gt;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;在队列头文件内我们可以在 600 多行的位置找到有关队列的 API 函数声明：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/df73383642f6c2623a7797acb95b015e.png&#34; alt=&#34;20211009131537&#34;&gt;&lt;/p&gt; 
&lt;p&gt;下面介绍一下队列有关接口的函数接口：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueNew&lt;/td&gt;&lt;td&gt;创建并初始化一个新的队列&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGetName&lt;/td&gt;&lt;td&gt;获取队列的名字&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueuePut&lt;/td&gt;&lt;td&gt;发送一条消息到队列&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGet&lt;/td&gt;&lt;td&gt;从队列等待一条消息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGetCapacity&lt;/td&gt;&lt;td&gt;获取队列传输消息的峰值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGetMsgSize&lt;/td&gt;&lt;td&gt;获取队列使用内存池的最大峰值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGetCount&lt;/td&gt;&lt;td&gt;获取队列的消息数量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueGetSpace&lt;/td&gt;&lt;td&gt;获取队列剩余的可用空槽&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueReset&lt;/td&gt;&lt;td&gt;清空队列&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMessageQueueDelete&lt;/td&gt;&lt;td&gt;删除队列&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;以上的API接口有其对应的传入参数，具体使用方式需要在翻源码的注释，这里我选常用的来介绍一下：&lt;/p&gt; 
&lt;p&gt;消息队列常用的是插入与获取消息，初始化系统已经帮助我们完成，在初始化的时候会获取一个队列的句柄，之后对队列的操作都是围绕这个句柄展开，比如上面的代码中，句柄就是 &lt;code&gt;myQueue01Handle&lt;/code&gt; ，我们发送一个消息到这个队列，就是调用发送函数，对句柄进行操作，先看一下发送消息的函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;6&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMessageQueuePut&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osMessageQueueId_t&lt;/span&gt; mq_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;msg_ptr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; msg_prio&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数的功能&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;mq_id&lt;/td&gt;&lt;td&gt;传入队列的句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*msg_ptr&lt;/td&gt;&lt;td&gt;指向需要发送的消息内容的指针&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;msg_prio&lt;/td&gt;&lt;td&gt;本次发送消息的优先级（目前API未加入功能）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;发送消息的超时时间（设置为0代表一直等待发送成功）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osStatus_t（返回值）&lt;/td&gt;&lt;td&gt;返回执行结果&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;返回值的可能&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;错误&lt;/th&gt;&lt;th&gt;含义&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osOK&lt;/td&gt;&lt;td&gt;执行正常&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osError&lt;/td&gt;&lt;td&gt;系统错误&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osErrorTimeout&lt;/td&gt;&lt;td&gt;执行超时&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osErrorResource&lt;/td&gt;&lt;td&gt;资源不可用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osErrorParameter&lt;/td&gt;&lt;td&gt;参数无效&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osErrorNoMemory&lt;/td&gt;&lt;td&gt;内存不足&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osErrorISR&lt;/td&gt;&lt;td&gt;不允许在中断调用&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osStatusReserved&lt;/td&gt;&lt;td&gt;防止编译器优化项，不需要管他&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;所以我们发送一个消息到队列，函数用法如下：&lt;/p&gt; 
&lt;pre data-index=&#34;7&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; dat&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;666\r\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
		result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMessageQueuePut&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myQueue01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dat&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//发送成功&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//发送失败&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;发送消息的优先级暂时无用，CubeMX 对 FreeRTOS 的支持还不完善，发送消息里面的优先级未使用到，并且入队方式使用的是发送到队列尾部，没有从头部插入的方式，有需求可以 通过包含 queue.h 文件，调用 FreeRTOS 的官方代码，或者自己修改 生成代码的 API 接口结合优先级使用队列的向前插入和向后插入，丰富系统功能！&lt;/p&gt; 
&lt;p&gt;除了发送消息到队列，接受队列的消息 API 接口也经常用到，函数原型如下&lt;/p&gt; 
&lt;pre data-index=&#34;8&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMessageQueueGet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osMessageQueueId_t&lt;/span&gt; mq_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;msg_ptr&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;msg_prio&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数的功能&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;mq_id&lt;/td&gt;&lt;td&gt;接受队列的句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*msg_ptr&lt;/td&gt;&lt;td&gt;用于接受消息内容的指针&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;msg_prio&lt;/td&gt;&lt;td&gt;存放接受消息的优先级（目前API未加入功能）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;接受消息的超时时间（设置为10代表，当前任务挂起在挂起列表，直到接收成功时恢复，或者10个TICK等待周期到达然后任务强行恢复，不再等待，为0则是不等待，等待期间任务挂起在内核对象的挂起队列）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osStatus_t（返回值）&lt;/td&gt;&lt;td&gt;返回执行结果&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;函数用法&lt;/p&gt; 
&lt;pre data-index=&#34;9&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; dat&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
		result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMessageQueueGet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myQueue01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dat&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//接受成功&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//接受失败&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;注意：FreeRTOS 中获取和发送消息的 API 接口函数分为任务中调用和中断中调用，CubeMX 代码接口将两者整合了，调用时自动判断调用环境是在 ISR 还是正常运行环境中&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a name=&#34;t18&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_522&#34;&gt;&lt;/a&gt;五、创建定时器和信号量&lt;/h3&gt; 
&lt;h4&gt;&lt;a name=&#34;t19&#34;&gt;&lt;/a&gt;&lt;a id=&#34;51_CubeMX_524&#34;&gt;&lt;/a&gt;5.1 CubeMX下定时器的创建和配置&lt;/h4&gt; 
&lt;p&gt;软件定时器本质上就是设置一段时间，当设置的时间到达之后就执行指定的功能函数，调用的这个函数叫做回调函数。回调函数的两次执行间隔叫做定时器的定时周期，简而言之，当定时器的定时周期到了以后就会执行回调函数，下面介绍一下 CubeMX 中开启定时器的方法：&lt;/p&gt; 
&lt;p&gt;在 CubeMX 里面按下面步骤添加定时器&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/13d8411b14380373c90450df4acb0012.png&#34; alt=&#34;20211009221917&#34;&gt;&lt;/p&gt; 
&lt;p&gt;然后配置具体参数，参数的功能如下：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Timer Name&lt;/td&gt;&lt;td&gt;设置定时器的名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Callback&lt;/td&gt;&lt;td&gt;设定定时器的回调函数体&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;设定定时器的执行类型&lt;br&gt;osTimerPeriodic 定时器周期执行回调函数&lt;br&gt;osTimerOnce 定时器只执行一次回调函数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Code Generation Option&lt;/td&gt;&lt;td&gt;代码生成模式&lt;br&gt;As weak： 产生一个用 __weak 修饰的弱定义任务函数，用户可自己在进行定义；&lt;br&gt;As external： 产生一个外部引用的任务函数，用户需要自己定义该函数；&lt;br&gt;Default： 产生一个默认格式的任务函数，用户需要在该函数内实现自己的功能&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Parameter&lt;/td&gt;&lt;td&gt;传入参数，保持默认NULL就行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;软件定时器内存的分配方式，一般使用动态&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;参数配置完成后，生成代码，我们可以在 freertos.c 文件里面看到定时器创建后获得的句柄，以及生成的回调函数：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/0d1c239ca1dbf54e70bfeec6e0140e42.png&#34; alt=&#34;20211010142155&#34;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/5d75eb7a5bcda163a339ad69203dec41.png&#34; alt=&#34;20211010142213&#34;&gt;&lt;/p&gt; 
&lt;p&gt;有了句柄，我们就可以调用 cmsis_os2.c 里面的定时器接口函数对定时器进行操作，先看一下 CubeMX 提供的定时器接口函数及其功能&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osTimerNew&lt;/td&gt;&lt;td&gt;新建定时器，返回定时器控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osTimerGetName&lt;/td&gt;&lt;td&gt;获取定时器名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osTimerStart&lt;/td&gt;&lt;td&gt;设置定时器周期，启动定时器&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osTimerStop&lt;/td&gt;&lt;td&gt;停止定时器&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osTimerIsRunning&lt;/td&gt;&lt;td&gt;检测定时器是否在运行&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osTimerDelete&lt;/td&gt;&lt;td&gt;删除定时器&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;其中常用的接口是定时器的启动和停止&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;定时器启动： &lt;code&gt;osTimerStart&lt;/code&gt;，函数原型&lt;/strong&gt;&lt;/p&gt; 
&lt;pre data-index=&#34;10&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osTimerStart&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osTimerId_t&lt;/span&gt; timer_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; ticks&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;timer_id&lt;/td&gt;&lt;td&gt;需要启动的定时器句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ticks&lt;/td&gt;&lt;td&gt;设置定时器的运行周期&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;此处的 ticks 设定的数字是定时器两次调用回调函数的周期数目，每个 tick 是一个心跳时钟的长度&lt;/p&gt; 
&lt;p&gt;使用例程：&lt;/p&gt; 
&lt;pre data-index=&#34;11&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
    &lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; dat&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osTimerStart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myTimer01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//启动成功&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//启动失败&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;p&gt;&lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;token function&amp;quot;&amp;gt;osDelay&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token number&amp;quot;&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;22&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;23&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;24&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;按照例程启动定时器，定时器会以 10个tick 的周期，调用回调函数&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;回调函数不要放阻塞函数，程序尽可能短&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;定时器启动： &lt;code&gt;osTimerStop&lt;/code&gt;，函数原型&lt;/strong&gt;&lt;/p&gt; 
&lt;pre data-index=&#34;12&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osTimerStop&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osTimerId_t&lt;/span&gt; timer_id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数只有一个，就是定时器的控制句柄，传入即可停止定时器，例程如下&lt;/p&gt; 
&lt;pre data-index=&#34;13&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; dat&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osTimerStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myTimer01Handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//停止成功&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//停止失败&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;软件定时器是由软件定时器维护任务进行维护，检测各个定时器的状态，进行处理，回调回调函数，软件定时器维护任务的参数配置在前面的 Config 就已经提到过&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h4&gt;&lt;a name=&#34;t20&#34;&gt;&lt;/a&gt;&lt;a id=&#34;52_CubeMX_644&#34;&gt;&lt;/a&gt;5.2 CubeMX下信号量的创建和配置&lt;/h4&gt; 
&lt;p&gt;信号量是 RTOS 的一个内核对象，该对象有一个队列表示该信号量拥有的信号数目，任何任务都可以对这个信号数目进行获取和释放，获取时信号-1，释放时信号+1，为0时不能继续获取，此时有任务想要继续获取信号量的话，任务会挂起在该内核对象的挂起列表，等到信号可以获取时进行恢复，根据这个特性，&lt;strong&gt;信号量常用于控制对共享资源的访问和任务同步&lt;/strong&gt;，下面介绍一下 CubeMX 下信号量的配置：&lt;/p&gt; 
&lt;p&gt;点开配置页面，可以看到有两个信号量添加页面，其中 Binary Semaphores 是二值信号量，Counting Semaphores 是计数信号量，二进制信号量，仅有一个队列或者说 token，用于同步一个操作；计数信号量则拥有多个 tokens，可用于同步多个操作，或者管理有限资源&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/f5b5c121e27659737ee3dee5f5e8778c.png&#34; alt=&#34;20211010153231&#34;&gt;&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;二值信号量创建：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;点击 Add，配置参数&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/cf4eb10549dcde7e1ffd7e3b8ad7078c.png&#34; alt=&#34;20211010163823&#34;&gt;&lt;/p&gt; 
&lt;p&gt;参数介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Semaphore Name&lt;/td&gt;&lt;td&gt;信号量名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;内存分配方式，一般使用动态&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;&lt;strong&gt;计数信号量：&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;点击 Add，配置参数&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c7c6dc536edba5089ff0e2da7e99ba80.png&#34; alt=&#34;20211010163959&#34;&gt;&lt;/p&gt; 
&lt;p&gt;参数介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Semaphore Name&lt;/td&gt;&lt;td&gt;信号量名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Count&lt;/td&gt;&lt;td&gt;计数信号量的最大数目&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;内存分配方式，一般使用动态&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;配置完成后我们生成代码，在 freertos.c 的初始化代码中可以看到信号量被创建，并且返回了信号量的控制句柄&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/82b2cf49541c6177bef892e5778ed86a.png&#34; alt=&#34;20211010164347&#34;&gt;&lt;/p&gt; 
&lt;p&gt;下面介绍一下 CubeMX 提供的信号量操作函数接口：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osSemaphoreNew&lt;/td&gt;&lt;td&gt;创建新的信号量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*osSemaphoreGetName&lt;/td&gt;&lt;td&gt;获取信号量的名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osSemaphoreAcquire&lt;/td&gt;&lt;td&gt;获取信号量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osSemaphoreRelease&lt;/td&gt;&lt;td&gt;释放信号量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osSemaphoreGetCount&lt;/td&gt;&lt;td&gt;获取当前可用信号量的数目&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osSemaphoreDelete&lt;/td&gt;&lt;td&gt;删除信号量&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;其中常用的函数有获取和释放信号量，下面介绍一下这两个函数的参数和使用方式&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;获取信号量 osSemaphoreAcquire&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;14&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osSemaphoreAcquire&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osSemaphoreId_t&lt;/span&gt; semaphore_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;semaphore_id&lt;/td&gt;&lt;td&gt;传入要获取信号量的控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;获取等待时间（等待期间任务挂起在内核对象的挂起队列）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用例程&lt;/p&gt; 
&lt;pre data-index=&#34;15&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;p&gt;​
&lt;span class=&#34;token comment&#34;&gt;/* Infinite loop &lt;em&gt;/&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​		result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osSemaphoreAcquire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myBinarySem01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
​		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​			&lt;span class=&#34;token comment&#34;&gt;//获取成功&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​			&lt;span class=&#34;token comment&#34;&gt;//获取失败&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
​    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;/&lt;/em&gt; USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;释放信号量 osSemaphoreRelease&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;16&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osSemaphoreRelease&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osSemaphoreId_t&lt;/span&gt; semaphore_id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;semaphore_id&lt;/td&gt;&lt;td&gt;传入要释放的信号量控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用例程&lt;/p&gt; 
&lt;pre data-index=&#34;17&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;p&gt;​
&lt;span class=&#34;token comment&#34;&gt;/* Infinite loop &lt;em&gt;/&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​		result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osSemaphoreRelease&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myBinarySem01Handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
​		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​			&lt;span class=&#34;token comment&#34;&gt;//释放成功&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
​			&lt;span class=&#34;token comment&#34;&gt;//释放失败&lt;/span&gt;
​		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
​    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;/&lt;/em&gt; USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;二值信号量和计数信号量的操作基本一致，没用区别，只是用有的信号队列最大数目不同而已&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;同时注意信号量在使用过程中会出现优先级反转的Bug，使用时需要注意&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a name=&#34;t21&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_779&#34;&gt;&lt;/a&gt;六、创建互斥量&lt;/h3&gt; 
&lt;h4&gt;&lt;a name=&#34;t22&#34;&gt;&lt;/a&gt;&lt;a id=&#34;61_CubeMX_781&#34;&gt;&lt;/a&gt;6.1 CubeMX下互斥量的创建和配置&lt;/h4&gt; 
&lt;p&gt;互斥量其实就是一个拥有优先级继承的二值信号量，互斥信号量适合用于那些需要互斥访问的应用中，在互斥访问中互斥信号量相当于一个钥匙，当任务想要使用资源的时候就必须先获得这个钥匙，当使用完资源以后就必须归还这个钥匙，这样其他的任务就可以拿着这个钥匙去使用资源，与信号量不同的是，互斥量的释放必须由获取他的任务进行释放，如果不释放，可能会造成死锁&lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;死锁就是两个任务获取对方拥有的锁，各自进入挂起列表，无法释放互斥锁&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;下面介绍一下 CubeMX 下互斥量的配置，在配置界面我们可用看到两个互斥量配置界面，上面的是普通互斥量，其获取只能获取一次，重复获取是无效的，而第二个则是递归互斥量，递归互斥信号量可以获取多次，但对应的也要释放多次才能让出使用权，比如我获取3次，任务要释放3次才能释放该互斥量的使用权&lt;/p&gt; 
&lt;p&gt;使用互斥量，需要点击 Add 然后配置参数&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/18c865980b3defab6043e52b5ff27f30.png&#34; alt=&#34;20211010173127&#34;&gt;&lt;/p&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Mutex Name&lt;/td&gt;&lt;td&gt;互斥量名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;内存分配方式，一般使用动态&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;递归互斥信号量的配置方式与其相同，包括配置参数也相同，两者只是在用法上有些许区别，添加方式如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/c6f0a5e73f8dcc04adf62d8bdb57a04c.png&#34; alt=&#34;20211010173704&#34;&gt;&lt;/p&gt; 
&lt;p&gt;添加配置完成后，点击生成代码，在 freertos.c 文件中我们可以看到互斥量初始化完成，并且生成了对应的控制句柄&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/efee4357f4d68db0727541159149fef4.png&#34; alt=&#34;20211010174350&#34;&gt;&lt;/p&gt; 
&lt;p&gt;CubeMX 提供的 API 接口函数如下&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osMutexNew&lt;/td&gt;&lt;td&gt;创建互斥量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*osMutexGetName&lt;/td&gt;&lt;td&gt;获取互斥量名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMutexAcquire&lt;/td&gt;&lt;td&gt;任务获取互斥量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMutexRelease&lt;/td&gt;&lt;td&gt;任务释放互斥量&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMutexGetOwner&lt;/td&gt;&lt;td&gt;获取互斥量的拥有任务的任务 TCB&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osMutexDelete&lt;/td&gt;&lt;td&gt;删除互斥量&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;主要使用到的还是互斥量的获取与释放，下面分析一下这两个函数：&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;获取互斥量 osMutexAcquire&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;18&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMutexAcquire&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osMutexId_t&lt;/span&gt; mutex_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;mutex_id&lt;/td&gt;&lt;td&gt;互斥量控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;获取互斥量时的等待时间（等待期间任务挂起在内核对象的挂起队列）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;pre data-index=&#34;19&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMutexAcquire&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myMutex01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//获取成功&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//获取失败&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;释放互斥量 osMutexRelease&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;20&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMutexRelease&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osMutexId_t&lt;/span&gt; mutex_id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;mutex_id&lt;/td&gt;&lt;td&gt;互斥量控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;pre data-index=&#34;21&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartTask02&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartTask02 */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    result&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osMutexRelease&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myMutex01Handle&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//释放成功&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34;&gt;//释放失败&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartTask02 */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;使用方式和信号量基本相同，因为互斥量本质上就是信号量的一种&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a name=&#34;t23&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_900&#34;&gt;&lt;/a&gt;七、创建事件标志组&lt;/h3&gt; 
&lt;h4&gt;&lt;a name=&#34;t24&#34;&gt;&lt;/a&gt;&lt;a id=&#34;71_CubeMX_902&#34;&gt;&lt;/a&gt;7.1 CubeMX下事件的创建和配置&lt;/h4&gt; 
&lt;p&gt;任务间的同步除了信号量还有时间标志组，信号的同步通常是一对一的同步，有的时候系统需要多对一的同步，比如同时满足5个按键按下时，任务启动，如果使用信号会很占据资源，所以 RTOS 引入了事件标志组来满足这一需求，下面我们看一下 CubeMX 内事件标志组的配置方法：&lt;/p&gt; 
&lt;p&gt;点击 Add 创建事件标志组&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/628cf7734f3f2de7e692bcc4194f4d71.png&#34; alt=&#34;20211010201501&#34;&gt;&lt;/p&gt; 
&lt;p&gt;配置介绍&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Event flags Name&lt;/td&gt;&lt;td&gt;事件标志组名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Allocation&lt;/td&gt;&lt;td&gt;内存分配方式，一般使用动态&lt;br&gt;Static： 静态方式是直接在RAM占据一个静态空间&lt;br&gt;Dynamic：动态方则是在初始配置的内存池大小数组中动态申请、释放空间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;配置完成后，生成代码，在系统初始化内，看有没有生成事件标志组控制句柄，可以看到句柄创建完成&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/379dfd171612fcd7d24d9b5d03d808be.png&#34; alt=&#34;20211010201922&#34;&gt;&lt;/p&gt; 
&lt;p&gt;CubeMX 提供的配置事件标志组的接口 API 如下：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsNew&lt;/td&gt;&lt;td&gt;创建事件标志组&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*osEventFlagsGetName&lt;/td&gt;&lt;td&gt;获取事件标志组名称&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsSet&lt;/td&gt;&lt;td&gt;设置事件标志组&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsClear&lt;/td&gt;&lt;td&gt;清除事件标志组&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsGet&lt;/td&gt;&lt;td&gt;获取当前事件组标志信息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsWait&lt;/td&gt;&lt;td&gt;等待事件标志组触发&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osEventFlagsDelete&lt;/td&gt;&lt;td&gt;删除事件标志组&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;常用的 API 接口是设置事件标志组以及等待事件标志组的触发，下面我们分析一下这两个 API&lt;/p&gt; 
&lt;p&gt;在了解 API 前我们需要简单了解一下事件的触发原理：首先事件标志组的数据类型为 EventGroupHandle_t，&lt;strong&gt;事件标志组中的所有事件位都存储在一个无符号的 EventBits_t 类型的变量中&lt;/strong&gt;，当 configUSE_16_BIT_TICKS 为 1 的时候事件标志组可以存储 8 个事件位，当 configUSE_16_BIT_TICKS 为 0 的时候事件标志组存储 24个事件位，每个事件位其实就是一个0或者1数字，就像下面的24位组成一个事件标志组&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/5cfbdcd0160d44aeb9ba16e0d135affe.png&#34; alt=&#34;20211010203414&#34;&gt;&lt;/p&gt; 
&lt;p&gt;我们在使用事件API接口函数前&lt;strong&gt;需要先定义我们需要的触发事件位&lt;/strong&gt;，比如添加如下的代码&lt;/p&gt; 
&lt;pre data-index=&#34;22&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;event1&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; 	&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//事件1&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;define&lt;/span&gt; &lt;span class=&#34;token macro-name&#34;&gt;event2&lt;/span&gt; &lt;span class=&#34;token expression&#34;&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt; 	&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//事件2&lt;/span&gt;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;编写好触发事件后，我们在看如何使用 API 接口&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;设置事件标志 osEventFlagsSet&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;23&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osEventFlagsSet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osEventFlagsId_t&lt;/span&gt; ef_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ef_id&lt;/td&gt;&lt;td&gt;事件标志组控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;flags&lt;/td&gt;&lt;td&gt;事件位&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用方式：设置事件1和事件2&lt;/p&gt; 
&lt;pre data-index=&#34;24&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
		result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osEventFlagsSet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myEvent01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;event1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//事件1设置成功&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//事件1设置失败&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
		result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osEventFlagsSet&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myEvent01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;event2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//事件2设置成功&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//事件2设置失败&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; 
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;21&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;22&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;23&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;24&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;25&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;26&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;27&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;等待事件标志 osEventFlagsWait&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;25&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osEventFlagsWait&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osEventFlagsId_t&lt;/span&gt; ef_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;ef_id&lt;/td&gt;&lt;td&gt;事件标志组控制句柄&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;flags&lt;/td&gt;&lt;td&gt;等待的事件位&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;options&lt;/td&gt;&lt;td&gt;等待事件位的操作&lt;br&gt;osFlagsWaitAny ：等待的事件位有任意一个等到就恢复任务&lt;br&gt;osFlagsWaitAll：等待的事件位全部等到才恢复任务 &lt;br&gt;osFlagsNoClear：等待成功后不清楚所等待的标志位（默认清除）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;等待事件组的等待时间（等待期间任务挂起在内核对象的挂起队列）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用例子：同时等待事件1和事件2，且等待到不清除&lt;/p&gt; 
&lt;pre data-index=&#34;26&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
		result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osEventFlagsWait&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;myEvent01Handle&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;event1&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;event2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;osFlagsWaitAll&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;osFlagsNoClear&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; osOK&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//等待成功&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
			&lt;span class=&#34;token comment&#34;&gt;//等待失败&lt;/span&gt;
		&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;osDelay&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;h3&gt;&lt;a name=&#34;t25&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_1036&#34;&gt;&lt;/a&gt;八、用户常量&lt;/h3&gt; 
&lt;p&gt;User Constants 用于添加用户常量，将不变的量转化为常量保存，可以节省 RAM 资源空间，因为常量和变量的保存位置不同，详细了解可以参考这篇文章：&lt;a href=&#34;https://blog.csdn.net/qq_45396672/article/details/119155585&#34;&gt;C语言：内存四区&lt;/a&gt;&lt;/p&gt; 
&lt;h3&gt;&lt;a name=&#34;t26&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_1040&#34;&gt;&lt;/a&gt;九、任务通知&lt;/h3&gt; 
&lt;p&gt;FreeRTOS 的每个任务都&lt;strong&gt;有一个 32 位的通知值&lt;/strong&gt;，任务控制块中的成员变量 ulNotifiedValue 就是这个通知值。任务通知是一个事件，假如某个任务通知的接收任务因为等待任务通知而阻塞的话，向这个接收任务发送任务通知以后就会解除这个任务的阻塞状态，CubeMX内没有提供相关的配置项，但在其生成的 FreeRTOS 接口里面有相关函数进行配置，函数位置如下：&lt;/p&gt; 
&lt;p&gt;&lt;img src=&#34;https://i-blog.csdnimg.cn/blog_migrate/db70d19d1e96d6e01f7a947a738bee3f.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; 
&lt;p&gt;接口函数功能：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osThreadFlagsSet&lt;/td&gt;&lt;td&gt;设置任务的通知标志&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadFlagsClear&lt;/td&gt;&lt;td&gt;清除任务通知&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadFlagsGet&lt;/td&gt;&lt;td&gt;获取任务标志&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osThreadFlagsWait&lt;/td&gt;&lt;td&gt;等待特定的任务标志&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;常用的两个 API 就是设置任务通知和等待任务通知函数&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;设置通知 osThreadFlagsSet&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;27&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osThreadFlagsSet&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;osThreadId_t&lt;/span&gt; thread_id&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;thread_id&lt;/td&gt;&lt;td&gt;任务控制块&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;flags&lt;/td&gt;&lt;td&gt;设置的标志&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;p&gt;先定义一个事件标志&lt;/p&gt; 
&lt;pre data-index=&#34;28&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;#define  event1 1&amp;lt;&amp;lt;1 	//事件1
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;然后调用 API 通知对应任务事件发生&lt;/p&gt; 
&lt;pre data-index=&#34;29&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;	result &amp;lt;span class=&amp;quot;token operator&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;token function&amp;quot;&amp;gt;osThreadFlagsSet&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;myTask02Handle&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;event1&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;result &amp;lt;span class=&amp;quot;token operator&amp;quot;&amp;gt;==&amp;lt;/span&amp;gt; osOK&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;{&amp;lt;!-- --&amp;gt;&amp;lt;/span&amp;gt;
		&amp;lt;span class=&amp;quot;token comment&amp;quot;&amp;gt;//设置成功&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;{&amp;lt;!-- --&amp;gt;&amp;lt;/span&amp;gt;
		&amp;lt;span class=&amp;quot;token comment&amp;quot;&amp;gt;//设置失败&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;token function&amp;quot;&amp;gt;osDelay&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;strong&gt;等待通知 osThreadFlagsWait&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;函数原型&lt;/p&gt; 
&lt;pre data-index=&#34;30&#34; class=&#34;set-code-show prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;osThreadFlagsWait&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;uint32_t&lt;/span&gt; timeout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;p&gt;参数介绍：&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;flags&lt;/td&gt;&lt;td&gt;设置的标志&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;options&lt;/td&gt;&lt;td&gt;设置功能&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;timeout&lt;/td&gt;&lt;td&gt;超时时间&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;options参数&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;参数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osFlagsWaitAny&lt;/td&gt;&lt;td&gt;等待32位通知值任意一位触发后恢复任务（默认）&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osFlagsWaitAll&lt;/td&gt;&lt;td&gt;等待指定的任务通知值全部触发后再恢复任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osFlagsNoClear&lt;/td&gt;&lt;td&gt;恢复任务后不清除任务标志（默认清除）&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 
&lt;p&gt;使用方式&lt;/p&gt; 
&lt;p&gt;调用 API 等待对应的任务通知就绪，当其他任务设置到对应的通知后，任务恢复运行&lt;/p&gt; 
&lt;pre data-index=&#34;31&#34; class=&#34;set-code-hide prettyprint&#34;&gt;&lt;code class=&#34;prism language-c has-numbering&#34; onclick=&#34;mdcp.copyCode(event)&#34; style=&#34;position: unset;&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;StartDefaultTask&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;argument&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* USER CODE BEGIN StartDefaultTask */&lt;/span&gt;
	&lt;span class=&#34;token class-name&#34;&gt;osStatus_t&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token comment&#34;&gt;/* Infinite loop */&lt;/span&gt;
  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;!-- --&gt;&lt;/span&gt;
&lt;pre&gt;&lt;code&gt;	result &amp;lt;span class=&amp;quot;token operator&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;token function&amp;quot;&amp;gt;osThreadFlagsWait&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;myTask02Handle&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;osFlagsWaitAll&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;,&amp;lt;/span&amp;gt;event1&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;result &amp;lt;span class=&amp;quot;token operator&amp;quot;&amp;gt;==&amp;lt;/span&amp;gt; osOK&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;{&amp;lt;!-- --&amp;gt;&amp;lt;/span&amp;gt;
		&amp;lt;span class=&amp;quot;token comment&amp;quot;&amp;gt;//等待成功&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;{&amp;lt;!-- --&amp;gt;&amp;lt;/span&amp;gt;
		&amp;lt;span class=&amp;quot;token comment&amp;quot;&amp;gt;//等待失败&amp;lt;/span&amp;gt;
	&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;}&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;token function&amp;quot;&amp;gt;osDelay&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;(&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token number&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;)&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;token punctuation&amp;quot;&amp;gt;;&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;token comment&#34;&gt;/* USER CODE END StartDefaultTask */&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;hljs-button {2}&#34; data-title=&#34;复制&#34;&gt;&lt;/div&gt;&lt;/code&gt;&lt;div class=&#34;hide-preCode-box&#34;&gt;&lt;span class=&#34;hide-preCode-bt&#34; data-report-view=&#34;{&amp;quot;spm&amp;quot;:&amp;quot;1001.2101.3001.7365&amp;quot;}&#34;&gt;&lt;img class=&#34;look-more-preCode contentImg-no-view&#34; src=&#34;https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png&#34; alt=&#34;&#34; title=&#34;&#34;&gt;&lt;/span&gt;&lt;/div&gt;&lt;ul class=&#34;pre-numbering&#34; style=&#34;&#34;&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;1&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;2&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;3&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;4&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;5&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;6&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;7&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;8&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;9&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;10&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;11&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;12&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;13&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;14&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;15&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;16&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;17&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;18&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;19&lt;/li&gt;&lt;li style=&#34;color: rgb(153, 153, 153);&#34;&gt;20&lt;/li&gt;&lt;/ul&gt;&lt;/pre&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;strong&gt;任务通知其实个任务事件标志组使用上没有多大的区别，但他们两个的实现原理不同，同时任务通知对资源的占用更少&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;&lt;strong&gt;根据 FreeRTOS 官方的统计，使用任务通知替代二值信号量的时候任务解除阻 塞的时间要快 45%，并且需要的 RAM 也更少&lt;/strong&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;h3&gt;&lt;a name=&#34;t27&#34;&gt;&lt;/a&gt;&lt;a id=&#34;_1161&#34;&gt;&lt;/a&gt;十、系统内核配置&lt;/h3&gt; 
&lt;p&gt;CubeMX 生成的代码中封装了一系列内核配置函数，有些函数也经常使用到，比如获取时间戳和调度器管理的函数，这里不做过多解释，简单的介绍一下函数的功能&lt;/p&gt; 
&lt;div class=&#34;table-box&#34;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;/th&gt;&lt;th&gt;功能&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;osKernelInitialize&lt;/td&gt;&lt;td&gt;初始化RTOS的内核&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetInfo&lt;/td&gt;&lt;td&gt;获取RTOS的信息&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetState&lt;/td&gt;&lt;td&gt;获取当前内核的运行状态&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelStart&lt;/td&gt;&lt;td&gt;启动内核调度&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelLock&lt;/td&gt;&lt;td&gt;锁内核调度器&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelUnlock&lt;/td&gt;&lt;td&gt;解锁内核调度器&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelRestoreLock&lt;/td&gt;&lt;td&gt;恢复RTOS内核调度器锁状态&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelSuspend&lt;/td&gt;&lt;td&gt;挂起任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelResume&lt;/td&gt;&lt;td&gt;恢复任务&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetTickCount&lt;/td&gt;&lt;td&gt;用于获取系统当前运行的时钟节拍数&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetTickFreq&lt;/td&gt;&lt;td&gt;用于获取系统当前运行的时钟节拍的分频频率&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetSysTimerCount&lt;/td&gt;&lt;td&gt;获取系统时钟（SysTick）的计数值&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;osKernelGetSysTimerFreq&lt;/td&gt;&lt;td&gt;获取系统时钟（SysTick）的频率&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;仅供参考，可能有误&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
