<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>浅析PID</title><url>/post/%E6%B5%85%E6%9E%90pid/</url><categories><category>MCU</category></categories><tags><tag>单片机</tag><tag>运动控制</tag><tag>算法</tag></tags><content type="html">  浅析PID 参考学习SUNPLUS 《PID 调节控制做电机速度控制》后总结，在线阅读链接如下：
1343214947-695804.pdf PID 控制器是一种广泛应用于工业控制系统的控制器，它通过将偏差的比例（Proportion）、积分（Integral）和微分（Differential）三个部分进行线性组合，生成控制量，从而对被控对象进行控制。PID 控制器的核心思想是通过对系统偏差的实时调整，使系统的输出尽可能接近期望值。
1 模拟 PID 控制原理 模拟 PID 控制系统的原理框图 如图 1-2 所示，模拟 PID 控制系统由 PID 控制器和被控对象（如电机）组成。系统的输入是给定值 ($r(t)$)，输出是实际输出值 ($y(t)$)，偏差 ($e(t) = r(t) - y(t)$) 作为 PID 控制器的输入，控制器的输出 ($u(t)$) 作为被控对象的输入。
PID 控制器的控制规律可以用以下公式表示：
$$ u(t) = K_p \left[ e(t) + \frac{1}{T_i} \int_0^t e(\tau) d\tau + T_d \frac{de(t)}{dt} \right] $$
如何理解呢？
其中：
$K_p$：比例系数，决定比例控制的强度。 $T_i$：积分时间，决定积分控制的强度。 $T_d$：微分时间，决定微分控制的强度。 PID 控制器的三个部分 比例部分（Proportion） 比例部分的数学表达式为：
$$ K_p \cdot e(t) $$
作用：比例控制的作用是对偏差瞬间作出反应。偏差一旦产生，控制器立即产生控制作用，使控制量向减少偏差的方向变化。
特点：
比例系数 ($K_p$) 越大，控制作用越强，系统的响应速度越快，静态偏差越小。 但 $K_p$ 过大会导致系统振荡，破坏系统的稳定性。 总结：比例控制能够快速响应偏差，但过大的比例系数会导致系统不稳定。
积分部分（Integral） 积分部分的数学表达式为：
$$ \frac{K_p}{T_i} \int_0^t e(\tau) d\tau $$
作用：积分控制的作用是消除系统的稳态误差。只要存在偏差，积分控制的作用就会不断增加，直到偏差为零。
特点：
积分时间 ($T_i$) 越大，积分作用越弱，系统的响应速度变慢，但可以减少超调量，提高系统的稳定 …  </content></entry><entry><title>CubeMX下的freeRTOS</title><url>/post/cubemx%E4%B8%8B%E7%9A%84freertos/</url><categories><category>MCU</category></categories><tags><tag>STM32</tag><tag>cubeMX</tag><tag>freeRTOS</tag></tags><content type="html">  CubeMX使用FreeRTOS编程指南 一、开发前言 CMSIS是一种接口标准，目的是屏蔽软硬件差异以提高软件的兼容性。RTOS v1使得软件能够在不同的实时操作系统下运行（屏蔽不同RTOS提供的API的差别)，而RTOS v2则是拓展了RTOS v1，兼容更多的CPU架构和实时操作系统。因此我们在使用时可以根据实际情况选择，如果学习过程中使用STM32F1、F4等单片机时没必要选择RTOS v2，更高的兼容性背后时更加冗余的代码，理解起来比较困难。
使用 STM32CubeMX 代码生成，在 STM32Cube 固件中，通过 ARM 提供的通用 CMSIS-OS（ cmsis_os.h 和 cmsis_os.c 文件，这两个文件把给 FreeRTOS 封装了一层，调用这其中的各类函数，和直接调用 FreeRTOS 的函数没有区别 ） 封装层，将 FreeRTOS 用作实时操作系统。也就是说在一套代码里有着两套标准，在阅读源码时需要注意区分。大多数教程讲解 FreeRTOS 的函数，此处说明ARM封装后函数。
二、配置界面 开启 FreeRTOS 之后，可以看到配置项主要分为以下几个部分
这几个部分的主要功能如下表：
配置项 功能 Tasks and Queues 任务与队列，用于配置任务体以及消息队列； Timers and Semaphores 软件定时器与信号量，用于配置内核对象 （软件定时器和信号量）； Mutexes 互斥量，用于配置内核对象（互斥量） Events 事件，配置内核对象（事件） FreeRTOS Heap Usage 查看用户任务和系统任务的堆占用 Config Parameters 系统的参数配置 Include Parameters 系统的功能裁剪 Advanced Settings CubeMX 生成代码预配置项 User Constants 用户常量定义 以上各个功能分的很清晰，我们需要配置什么功能就去对应的选项下进行配置，下面根据各个配置项进行详细配置介绍
三、系统设置 首先我们先了解一下 Config Parameters，他的配置参数如下
参数功能表：
参数 功能 API 显示 FreeRTOS API 接口版本 Version 显示 FreeRTOS 内核版本，CMSIS 版本 Kernel Setting …  </content></entry><entry><title>PCB设计与立创EDA使用备忘录</title><url>/post/pcb%E8%AE%BE%E8%AE%A1%E5%A4%87%E5%BF%98%E5%BD%95/</url><categories><category>MCU</category></categories><tags><tag>物联网</tag><tag>协议</tag><tag>基础</tag></tags><content type="html">  本篇课程基于B站UP主Expert电子实验室的教学视频，同时加上本人思考与总结汇总而成。
零基础入门PCB设计保姆级教学 Expert电子实验室 本部分笔记为扫盲篇（基础篇）
1. 电路设计 1.1 原理图四要素 元件符号 连接线 结点 注释 1.2 基本原件介绍 1.2.1 电阻 对于贴片电阻的读数 1）3位读数：前2位为有效数字，第3位表示10的n次幂(也可以理解为0的个数)。精度为±5%
2）4位读数：前3位为有效数字，第4位表示10的n次幂(也可以理解为0的个数)。读法和3位的原理一样，精度为±1%
3）阻值小于10的读数：通常在两个数之间插入一个字母R，用字母R来代替小数点
1.2.2 电容 主要功能：储能和滤波 单位计算 1 1uF=1000nF；1nF=1000pF 分类 读数以及含义 1.2.3 电感 Inductor，
单位换算 1 1H=1000mH；1mH=1000uH； 主要功能：滤波，扼流，谐振，储能 分类 读数以及含义 1.2.4 二极管 主要功能 实现对交流电整流、对调制信号检波、限幅和钳位以及对电源电压的稳压等多种功能 。
分类以及简单介绍 外观（判断正负极） 对于直插式发光二极管：长脚为正极，内部小块为正极。 一般封装类型的正负极判断 1.2.5 三极管 分类：NPN（控地） 和 PNP（控电源） 工作状态 截止状态 发射结反偏，集电结反偏。即：I ce=0
放大状态 发射结正偏，集电结反偏。
饱和状态
发射结正偏，集电结正偏
常见封装 1.2.6 场效应管（尚未掌握） 基本介绍 场效应晶体管（Field Effect Transistor缩写(FET)）简称场效应管。它是利用控制输入回路的电场效应来控制输出回路电流的一种半导体器件。
特点 具有输入电阻高、噪声小、功耗低、动态范围大、易于集成、没有二次击穿现象、安全工作区域宽等优点。
类型 结型场效应管（junction FET—JFET) 金属 - 氧化物半导体场效应管（metal-oxide semiconductor FET，简称MOS-FET） 与三极管的对比 封装 1.2.7 芯片 / IC 具体见数据手册
1.3 数据手册 自己找去
1.4 电路原理图设计 网络标签 网络标签 (Net Label)：网络标号表示一个电器连接点，具有相同网络标号的器件表明是电气连接在一 …  </content></entry><entry><title>华为嵌入式C语言代码简明规范</title><url>/post/%E5%8D%8E%E4%B8%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fc%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83%E7%B2%BE%E7%AE%80/</url><categories><category>MCU</category></categories><tags><tag>嵌入式</tag><tag>C语言</tag><tag>代码规范</tag></tags><content type="html">  规范制订说明 前言 基于华为C语言编程规范 在线wiki文档 代码总体原则 清晰第一 代码的可阅读性高于性能，只有确定性能是瓶颈时，才应该主动优化
优秀的代码可以自我解释（以我的水平可能做到比较难） 常写注释，并且注释写的清晰 简洁为美 写的代码越多，意味着出错的地方越多，也就意味着代码的可靠性越低。
如果重构/修改其他风格的代码时，比较明智的做法是根据现有代码的现有风格继续编写代码，或者使用格式转换工具进行转换成公司内部风格。
术语 原则：编程时必须坚持的指导思想。
规则：编程时强制必须遵守的约定。
建议：编程时必须加以考虑的约定。
说明：对此原则/规则/建议进行必要的解释。
示例：对此原则/规则/建议从正、反两个方面给出例子。
延伸阅读材料：建议进一步阅读的参考材料。
头文件 不合理的头文件布局是编译时间过长的根因，不合理的头文件实际上不合理的设计。
如果引入了新的依赖，则一旦被依赖的头文件修改，任何直接和间接依赖其头文件的代码都会被重新编译。
原则 原则1.1 头文件中适合放置接口的声明，不适合放置实现 头文件是模块（Module）或单元（Unit）的对外接口。头文件中应放置对外部的声明，如对外提供的函数声明、宏定义、类型定义等。
内部使用的函数（相当于类的私有方法）声明不应放在头文件中 内部使用的宏、枚举、结构定义不应放入头文件中。 变量定义不应放在头文件中，应放在.c文件中。 否则多次依赖会重复定义
变量的声明尽量不要放在头文件中，亦即尽量不要使用全局变量作为接口。变量是模块或单元的内部实现细节，不应通过在头文件中声明的方式直接暴露给外部，应通过函数接口的方式进行对外暴露。即使必须使用全局变量，也只应当在.c中定义全局变量，在.h中仅声明变量为全局的。 原则1.2 头文件应当职责单一。 原则1.3 头文件应向稳定的方向包含。 说明：头文件的包含关系是一种依赖，一般来说，应当让不稳定的模块依赖稳定的模块，从而当不稳定的模块发生变化时，不会影响（编译）稳定的模块。
规则 规则1.1 每一个.c文件应有一个同名.h文件，用于声明需要对外公开的接口。 说明：如果一个.c文件不需要对外公布任何接口，则其就不应当存在，除非它是程序的入口，如main函数所在的文件。
规则1.2 禁止头文件循环依赖 任何一个头文件的改变都会使得循环中的所有头文件重新编译
规则1.3 …  </content></entry><entry><title>物联网协议基础</title><url>/post/%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</url><categories><category>MCU</category></categories><tags><tag>物联网</tag><tag>协议</tag><tag>基础</tag></tags><content type="html">  MQTT（消息队列遥测传输协议） MQTT是轻量级的消息发布/订阅协议，设计用于资源受限的设备和低带宽、高延迟的网络环境。它已成为物联网领域的事实标准，广泛应用于智能家居、工业自动化等领域。
mqtt比较简单，算是我入门物联网使用的第一种方式（协议）。从搭建mqtt服务器，协议原理，连接方式以及mqtt上位机编写，通过实操都有了一定了解了。
MQTT服务器搭建（mosquitto） | Regen (regenm.github.io) esp8266连接服务器（基于mosquitto的mqtt server） | Regen (regenm.github.io) mqttSender | Regen (regenm.github.io) CoAP（受限应用协议） Coap（Constrained Application Protocol） 使用在资源受限的物联网设备上，
Coap协议特点
COAP协议网络传输层由TCP改为UDP。 它基于REST，server的资源地址和互联网一样也有类似url的格式，客户端同样有POST，GET,PUT,DELETE方法来访问server，HTTP做了简化。 COAP是二进制格式的，HTTP是文本格式的，COAP比HTTP更加紧凑。 轻量化，COAP最小长度仅仅4B，一个HTTP的头都几十个B了。 支持可靠传输，数据重传，块传输。确保数据可靠到达。 支持IP多播，即可以同时向多个设备发送请求。 非长连接通信，适用于低功耗物联网场景 CoAP是为物联网设备设计的轻量级协议，基于REST架构，与HTTP类似，但更加节能和高效，适用于低功耗、受限网络的物联网设备。
to be continued LoRaWAN LoRa和LoRaWAN的区别 LoRa：LoRa是一种物理层的调制技术，用于在设备之间传输无线电信号。它能够在不消耗大量电力的情况下，实现设备之间的长距离数据传输。LoRa的通信通常是点对点的，或者在某些场景下是点对多点的。 LoRaWAN：LoRaWAN是LoRa的网络层协议，用于管理LoRa设备如何在广域网中进行通信。它定义了设备如何与集中式网络服务器（通常通过网关）通信，从而实现设备数据的收集和处理。 1. LoRa： 定义：LoRa（Long Range）是一种调制技术，用于无线数据传输。它属于物理层（PHY），负责将 …  </content></entry><entry><title>Python语言与系统设计(1)</title><url>/post/python%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A11/</url><categories><category>学业</category></categories><tags><tag>python</tag><tag>算法</tag></tags><content type="html">  第一章：Python基础与快速入门 Python 是一门跨平台、开源、免费的解释型高级动态编程语言。
python 同时支持伪编译将 Python 源程序转换为字节码来优化程序和提高运行速度。
支持使用 py2exe、pyinstaller 或 cx_Freeze 工具将 Python 程序转换为二进制可执行文件。
Python 支持命令式编程（How to do）、函数式编程（What to do），完全支持面向对象程序设计
注：这里所谓的命令式编程和函数式编程其实很好理解，下面的例子：
命令式编程：
1 2 3 4 5 6 7 8 # 初始化变量 count = 0 # 命令式地执行一系列操作 for i in range(10): count += i # 修改状态 print(count) # 输出结果 函数式编程：
1 2 3 4 5 6 7 8 9 # 定义一个函数来计算两个数的和 def add(a, b): return a + b # 使用这个函数来计算3和5的和 result = add(3, 5) # 打印结果 print(result) # 输出: 8 胶水语言：可以把多种不同语言编写的程序融合到一起实现无缝拼接，更好地发挥不同语言和工具的优势，满足不同应用领域的需求。
Python 几个重要的网站：
https://www.python.org/ https://www.python.org/doc/ http://bugs.python.org/ https://hackerone.com/python http://stackoverflow.com/questions/tagged/python 这里忽略了 python 的安装与环境的配置，我使用的 Jupyter Notebook 进行 python 程序的编写。
基础知识 Python 对象模型 对象是 python 中最基本的概念，在 python 中处理的一切都是对象。
包含许多内置对象可直接使用，如数字、字符串、列表、del 等；
非内置对象需要导入模块才能使用，如正弦函数 sin (x)，随机数产生函数 random ( ) 等。
对象类型 类型名称 示例 简要说明 数字 int, float, complex 1234, 3.14, 1.3e5, 3+4j 数字大小没有 …  </content></entry><entry><title>算法温故笔记</title><url>/post/%E7%AE%97%E6%B3%95%E6%B8%A9%E6%95%85%E7%AC%94%E8%AE%B0/</url><categories><category>学业</category></categories><tags><tag>算法</tag><tag>c++</tag><tag>数据结构</tag></tags><content type="html">  动态规划（Dynamic Programming） 动态规划问题的一般形式就是求最值。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如说让你求最长递增子序列呀，最小编辑距离呀等等。
动态规划的核心思想就是穷举求最值，列出正确的「状态转移方程」，才能正确地穷举。而且，你需要判断算法问题是否具备「最优子结构」，是否能够通过子问题的最值得到原问题的最值。另外，动态规划问题存在「重叠子问题」。
首先，明确「状态」-&amp;amp;gt; 明确「选择」 -&amp;amp;gt; 定义 dp 数组/函数的含义。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 自顶向下递归的动态规划 def dp(状态1, 状态2, ...): for 选择 in 所有可能的选择: # 此时的状态已经因为做了选择而改变 result = 求最值(result, dp(状态1, 状态2, ...)) return result # 自底向上迭代的动态规划 # 初始化 base case dp[0][0][...] = base case # 进行状态转移 for 状态1 in 状态1的所有取值： for 状态2 in 状态2的所有取值： for ... dp[状态1][状态2][...] = 求最值(选择1，选择2...) 子矩阵的最大和问题 以 LeetCode面试题 17.24. 最大子矩阵 举例
给定一个正整数和负整数组成的 N × M 矩阵，编写代码找出元素总和最大的子矩阵。返回一个子矩阵左上角的行号和列号，右下角的行号和列号。若有多个满足条件的子矩阵，返回任意一个均可。
我们将二维转化为一维，对于矩阵的每一列，我们将其加在一起，成为了一维上的一个数，二维矩阵的和转化为了一维数组的和，如下图。
转化为求最大子序列和之后，假设给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。我们该如何解决呢？
1、状态定义：dp[i]为以nums[i]结尾的最大子序和。
2、状态转移方程：对于nums[i]有两种情况:一种是和前一个位置的子序列连着。$dp[i]=dp[i-1]+nums[i]$。第二种是以自己独立门户，从自己开始$dp[i]=nums[i]$。取其中最大值,可得状态转移方程为$dp[i]=max( dp[i-1] …  </content></entry><entry><title>机器人技术(1): 常用函数</title><url>/post/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8A%80%E6%9C%AF1%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%B8%8E%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</url><categories><category>学业</category></categories><tags><tag>RoboCup2D</tag><tag>c++</tag></tags><content type="html">  相关资料链接: 九月大人的博客 yikai-blog robocup2D官网 RoboCup 2D 常用函数简明含义 函数名称 功能说明 dribble(angle, speed) 控制球员带球移动。angle表示带球方向，speed表示带球速度（如DRIBBLE_FAST、DRIBBLE_SLOW等）。 kickTo(targetPosition, speed) 球员向目标位置（targetPosition）踢球，speed指定踢球的速度。 leadingPass(teammate, power) 向最近的队友传球，teammate是要传球的目标队友，power表示传球力度。 getNrInSetInCircle(set, circle) 计算指定半径的圆圈内（circle）特定对象集合（set，如对手或队友）的数量。例如用来判断7米范围内是否有对手球员。 getClosestInSetTo(set, position) 获取距离指定位置（position）最近的特定对象集合（set）中的对象，例如找到离当前球员最近的队友或对手。 isOpponentAtAngle(angleMin, angleMax) 判断在给定的角度范围内是否有对方球员。常用于决定是否在某个方向射门或传球。 getGlobalPosition(object) 获取场上某个对象（球员、对手、球等）的全局坐标位置（X, Y坐标）。 getBallPos() 获取球的当前位置坐标。 moveToPos(position, speed) 移动球员到指定的position（坐标位置），并以speed指定的速度执行移动。 isBallKickable() 判断当前球是否在球员的控制范围内（即球员是否可以踢球）。 kickBallCloseToBody(angle) 控制球员以指定的angle（角度）把球围绕身体转动。 intercept(timeout) 尝试在指定时间内抢断球（通常用在防守场景）。 turnNeckToObject(object) 让球员将头（视角）转向指定的object（如球或对方球员），通常用于跟踪球的位置。 getPlayerNumber() 返回当前球员的编号（如2号、10号等），不同球员编号对应不同策略。例如10号通常为前锋，会有更多进攻行为。 …  </content></entry><entry><title>机器人技术(2): 典型决策树学习算法ID3</title><url>/post/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%8A%80%E6%9C%AF2%E5%85%B8%E5%9E%8B%E5%86%B3%E7%AD%96%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95id3%E7%AE%97%E6%B3%95/</url><categories><category>学业</category></categories><tags><tag>RoboCup2D</tag><tag>c++</tag><tag>机器学习</tag><tag>决策树</tag><tag>ID3</tag><tag>手工算法</tag></tags><content type="html">  相关资料链接: 决策树-维基百科 深入浅出理解决策树算法（一）-核心思想 深入浅出理解决策树算法（二）-ID3算法与C4.5算法 深刻理解决策树-动手计算ID3算法 机器学习——使用ID3算法从原理到实际举例理解决策树 基于信息论的三种决策树算法 划分数据集的最大原则是：使无序的数据变的有序。 如果一个训练数据中有20个特征，那么选取哪个做划分依据？这就必须采用量化的方法来判断，量化划分方法有多重，其中一项就是“信息论度量信息分类”。基于信息论的决策树算法有ID3 、C4.5和 CART等算法，其中C4.5和CART两种算法从ID3算法中衍生而来。此处仅记录ID3算法。
ID3算法（Iterative Dichotomiser 3 迭代二叉树3代）是一个由 Ross Quinlan 发明的用于决策树的算法。
这个算法是建立在 奥卡姆剃刀 的基础上：越是小型的决策树越优于大的决策树（简单理论）。尽管如此，该算法也不是总是生成最小的树形结构。而是一个 启发式算法 。
这个ID3算法可以归纳为以下几点：
使用所有没有使用的属性并计算与之相关的样本熵值 选取其中熵值最小的属性 生成包含该属性的节点 理论公式 某个分类的信息 $$ l(x_i) = -\log_2 P(x_i) $$
这里(p(x_i))是选择该分类的概率。
熵 在信息论与概率统计中，熵是表示随机变量不确定性的度量。熵定义为信息的期望值，因此熵的计算方法如下：
$$ H = -\sum_{i=1}^{n} P(x_i) \log_2 P(x_i) $$ 这里 ( n ) 是分类的数目。
经验熵 熵中的概率由数据估计（特别是最大似然估计）得到。在 ( |D| ) 样本容量（样本个数）下，设有 ( K ) 个类 ( C_k ), ( k = 1,2,3,…,K )，( |C_k| ) 为属于类 ( C_k ) 的样本个数，得到其表达式如下：
$$ H(D) = -\sum_{k=1}^{K} \frac{|C_k|}{|D|} \log_2 \frac{|C_k|}{|D|} $$
条件熵 在已知随机变量 ( X ) 的条件下随机变量 ( Y ) 的不确定性，即在随机变量 ( X ) 给定的条件下随机变量 ( Y ) 的条件熵 ( H(Y|X) )，定义为 ( X ) 给定条件下 ( Y ) …  </content></entry><entry><title>c++基础</title><url>/post/c++%E5%9F%BA%E7%A1%80/</url><categories><category>学业</category></categories><tags><tag>基础</tag><tag>算法</tag><tag>c++</tag><tag>数据结构</tag></tags><content type="html"><![CDATA[  c++基础题目（1） 题目列表 1. 以下说法中正确的是（ ）。 答案：C 选项 A. 基类的私有成员在派生类的对象中不可访问，也不占内存空间 B. 封装性指的是将不同类型的相关数据组合在一起，作为一个整体进行处理 C. 在面向对象的程序设计中，结构化程序设计方法仍有着重要作用 D. 多态性指的是对象的状态会根据运行时要求自动变化 易错解释 A. 错误。基类的私有成员在派生类中不可访问，但仍然占用内存空间。 B. 错误。封装性指的是将数据和操作数据的方法绑定在一起，形成一个独立的单位。 D. 错误。多态性指的是同一接口可以有不同的实现形式。 2. 执行以下程序后，输出的结果是（ ）。 1 2 3 4 5 6 7 8 #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int a=4,b=5; float c=b/a; cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; return 0; } 答案：D 选项 A. 1.25 B. 0 C. 1.3 D. 1 易错解释 A. 错误。b/a 是整数除法，结果为1，再转换为浮点数仍然是1.0。 B. 错误。整数除法的结果不可能是0。 C. 错误。b/a 的结果为1，而不是1.3。 3. 以下描述不正确的是（ ）。 答案：B 选项 A. break语句在一层循环体中可出现多次 B. break语句可用在if语句中，它可使执行的流程跳出当前的if语句 C. break语句可用在循环体中，它将是执行的流程跳出本层循环 D. break语句可用在switch语句中，它使执行的流程跳出当前switch语句 易错解释 B. 错误。break 语句不能用于跳出 if 语句，只能用于跳出循环或 switch 语句。 4. 以下描述不正确的是（ ）。** 答案：A 选项 A. 相同类型的指针之间可以相互赋值 B. 指针中存放的实际上是内存单元的地址 C. 可以在指针定义的同时对其进行初始化 易错解释 A. 错误。相同类型的指针之间可以相互赋值，但不同类型的指针之间不能直接赋值，需要进行类型转换。 5. 以下说法中正确的是（ ）。 答案：C 选项 A. 当动态分配内存失败时，系统会立刻崩溃，因此一定要慎用new B. C++语言只能用new和delete用于动态内存分配和释 …  ]]></content></entry><entry><title>程序设计艺术(1): STL</title><url>/post/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%89%BA%E6%9C%AF1stl/</url><categories><category>学业</category></categories><tags><tag>STL</tag><tag>算法</tag><tag>c++</tag></tags><content type="html"><![CDATA[  #STL常用算法函数及其参数简明含义 供快速回顾（常用函数摘自HFUT ICPC讲义P21） find
功能：在范围 [first, last) 中查找值为 val 的第一个元素。 参数： InIt first, InIt last：输入迭代器，指定搜索范围。 const T&amp;amp; val：需要查找的值。 find_if
功能：在范围 [first, last) 中查找第一个满足谓词 pr 的元素。 参数： InIt first, InIt last：输入迭代器。 Pred pr：一元谓词函数，返回布尔值。 count
功能：计算范围 [first, last) 中等于 val 的元素个数。 参数： InIt first, InIt last：输入迭代器。 const T&amp;amp; val：待计数的值。 count_if
功能：计算范围 [first, last) 中满足谓词 pr 的元素个数。 参数： InIt first, InIt last：输入迭代器。 Pred pr：一元谓词函数。 copy
功能：将范围 [first, last) 中的元素复制到 x 开始的位置。 参数： InIt first, InIt last：输入迭代器。 OutIt x：输出迭代器，复制的目标位置。 swap
功能：交换两个变量 x 和 y 的值。 参数： T&amp;amp; x, T&amp;amp; y：需要交换的两个变量。 swap_ranges
功能：交换两个范围 [first, last) 和从 x 开始的元素。 参数： FwdIt1 first, FwdIt1 last：第一个范围的迭代器。 FwdIt2 x：第二个范围的起始迭代器。 replace
功能：将范围 [first, last) 中等于 vold 的元素替换为 vnew。 参数： FwdIt first, FwdIt last：输入迭代器。 const T&amp;amp; vold, const T&amp;amp; vnew：旧值和新值。 replace_if
功能：将范围 [first, last) 中满足谓词 pr 的元素替换为 val。 参数： FwdIt first, FwdIt last：输入迭代器。 Pred pr：一元谓词函数。 const T&amp;amp; val：替换的值。 generate
功能：用生成器 g  …  ]]></content></entry><entry><title>Hugo+Github Pages搭建静态网站作为个人博客(1)</title><url>/post/hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%89%98%E7%AE%A1%E4%BA%8Egithub-page1/</url><categories><category>网站</category></categories><tags><tag>markdown</tag><tag>Hugo</tag><tag>html</tag><tag>github page</tag></tags><content type="html"><![CDATA[   Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Jekyll(github page默认)、Gatsby、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。
安装 Hugo 在ubuntu24.04 LTS环境下到 Hugo Releases 下载对应的deb包(注意安装extend版本，许多第三方主题需要extend依赖)，安装完成后，使用以下命令进行验证：
1 hugo version 创建 Hugo 网站 通过上述命令安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了，如希望生成到 /path/to/site 路径：
1 $ hugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进去目录：
1 $ cd /path/to/site 站点目录结构：
1 2 3 4 5 6 7 8 9 . ├── archetypes: default.md是生成博文的模版 ├── assets # 存放被 Hugo Pipes 处理的文件 ├── content # 存放markdown文件作为博文内容 ├── data # 存放 Hugo 处理的数据 ├── layouts # 存放布局文件 ├── static # 存放静态文件 图片 CSS JS文件 ├── themes: 存放不同的主题 └── config.toml: 博客配置文件支持 JSON YAML TOML 三种格式配置文件 创建文章 创建一个 about 页面：
1 $ hugo new about.md about.md 自动生成到了 content/about.md ，打开 about.md 看下：
1 2 3 4 5 6 7 8 +++ date = &amp;#34;2015-10-25T08:36:54-07:00&amp;#34; draft = true title = &amp;#34;about&amp;#34; +++ 正文内容 内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好， …  ]]></content></entry><entry><title>Hugo+Github Pages搭建静态网站作为个人博客(2)</title><url>/post/hugo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E6%89%98%E7%AE%A1%E4%BA%8Egithub-page2/</url><categories><category>网站</category></categories><tags><tag>markdown</tag><tag>Hugo</tag><tag>html</tag><tag>github page</tag></tags><content type="html">  上一篇博客中重点于Hugo的使用，这一篇着重于以Stack主题为例进行博客撰写。
Stack is a simple card-style Hugo theme designed for Bloggers. Here are some of the features: Stack 是一个简单的卡片式 Hugo 主题，专为 Blogger 设计。以下是一些功能：
Responsive images support 响应式图像支持 Lazy load images 延迟加载图像 Dark mode 深色模式 Local search 本地搜索 PhotoSwipe integration 照片滑动 集成 Archive page template 存档页面模板 Full native JavaScript, no jQuery or any other frameworks are used 完全原生 JavaScript，不使用 jQuery 或任何其他框架 No CSS framework, keep it simple and minimal 没有 CSS 框架，保持简单和最小化 Properly cropped thumbnails 正确裁剪的缩略图 Subsection support 分段支持 Table of contents 目录 Hugo网站文件结构 网站根目录下面的文件夹目录树一般如下所示：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 . ├── archetypes │ └── default.md ├── hugo.yaml # 网站配置文件 ├── content # 站点内的内容都在这里 │ ├── categories # “分类”页面的首页 │ │ └── Test # “分类”页面下的一个分类页面 │ ├── page # 显示在网站主页左侧边栏菜单的选项 │ │ ├── about # 左侧边栏菜单中的“关于”页面 │ │ ├── archives # 左侧边栏菜单中的“归档”页面 │ │ ├── links # 左侧边栏菜单中的“链 …  </content></entry><entry><title>TIM -> CNT= -1</title><url>/post/tim-_count-1/</url><categories><category>生活</category></categories><tags><tag>摄影</tag></tags><content type="html">  长沙 宣城 合肥 桂林   </content></entry><entry><title>关于我</title><url>/about.html</url><categories/><tags/><content type="html">  业余爱好是摄影，是个正常的人🤓
信息 联系QQ：1467078763
  </content></entry><entry><title/><url>/bak/</url><categories/><tags/><content type="html">    </content></entry><entry><title>常用学习/工具网站</title><url>/flinks.html</url><categories/><tags/><content type="html">  如想推荐你觉得很棒的学习or工具链接，请在评论区留下站点信息，格式参考如下：
1 2 3 4 - name: Hugo-NexT desc: Hugo NexT 官方预览网站。 avatar: https://hugo-next.eu.org/imgs/hugo_next_avatar.png link: https://hugo-next.eu.org   </content></entry></search>