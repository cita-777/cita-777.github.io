<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MCU on Cita's blog</title><link>/categories/mcu/</link><description>Recent content in MCU on Cita's blog</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 09 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="/categories/mcu/rss.xml" rel="self" type="application/rss+xml"/><item><title>浅析PID</title><link>/post/%E6%B5%85%E6%9E%90pid/</link><pubDate>Thu, 09 Jan 2025 00:00:00 +0000</pubDate><guid>/post/%E6%B5%85%E6%9E%90pid/</guid><description>&lt;h1 id="浅析pid">浅析PID
&lt;a class="header-anchor" href="#%e6%b5%85%e6%9e%90pid">&lt;/a>
&lt;/h1>&lt;p>参考学习SUNPLUS &lt;strong>《PID&lt;/strong> 调节控制做电机速度控制》后总结，在线阅读链接如下：&lt;/p>
&lt;p>
&lt;a href="https://u.dianyuan.com/upload/space/2012/07/25/1343214947-695804.pdf" title="1343214947-695804.pdf" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 1343214947-695804.pdf
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;p>PID 控制器是一种广泛应用于工业控制系统的控制器，它通过将偏差的比例（Proportion）、积分（Integral）和微分（Differential）三个部分进行线性组合，生成控制量，从而对被控对象进行控制。PID 控制器的核心思想是通过对系统偏差的实时调整，使系统的输出尽可能接近期望值。&lt;/p></description></item><item><title>CubeMX下的freeRTOS</title><link>/post/cubemx%E4%B8%8B%E7%9A%84freertos/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>/post/cubemx%E4%B8%8B%E7%9A%84freertos/</guid><description>&lt;h2 id="cubemx使用freertos编程指南">CubeMX使用FreeRTOS编程指南
&lt;a class="header-anchor" href="#cubemx%e4%bd%bf%e7%94%a8freertos%e7%bc%96%e7%a8%8b%e6%8c%87%e5%8d%97">&lt;/a>
&lt;/h2>&lt;h3 id="一开发前言">一、开发前言
&lt;a class="header-anchor" href="#%e4%b8%80%e5%bc%80%e5%8f%91%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h3>&lt;p>CMSIS是一种接口标准，目的是屏蔽软硬件差异以提高软件的兼容性。RTOS v1使得软件能够在不同的实时操作系统下运行（屏蔽不同RTOS提供的API的差别)，而RTOS v2则是拓展了RTOS v1，兼容更多的CPU架构和实时操作系统。因此我们在使用时可以根据实际情况选择，如果学习过程中使用STM32F1、F4等单片机时没必要选择RTOS v2，更高的兼容性背后时更加冗余的代码，理解起来比较困难。&lt;/p></description></item><item><title>PCB设计与立创EDA使用备忘录</title><link>/post/pcb%E8%AE%BE%E8%AE%A1%E5%A4%87%E5%BF%98%E5%BD%95/</link><pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate><guid>/post/pcb%E8%AE%BE%E8%AE%A1%E5%A4%87%E5%BF%98%E5%BD%95/</guid><description>&lt;p>本篇课程基于B站UP主&lt;code>Expert电子实验室&lt;/code>的教学视频，同时加上本人思考与总结汇总而成。&lt;/p>
&lt;p>
&lt;a href="https://www.bilibili.com/video/BV1At421h7Ui/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&amp;amp;vd_source=c33a47a3f08b3b6b6c1614d37f34903f" title="零基础入门PCB设计保姆级教学" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 零基础入门PCB设计保姆级教学
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;p>
&lt;a href="https://space.bilibili.com/346179450" title="Expert电子实验室" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 Expert电子实验室
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p></description></item><item><title>华为嵌入式C语言代码简明规范</title><link>/post/%E5%8D%8E%E4%B8%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fc%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83%E7%B2%BE%E7%AE%80/</link><pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate><guid>/post/%E5%8D%8E%E4%B8%BA%E5%B5%8C%E5%85%A5%E5%BC%8Fc%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83%E7%B2%BE%E7%AE%80/</guid><description>&lt;h2 id="规范制订说明">规范制订说明
&lt;a class="header-anchor" href="#%e8%a7%84%e8%8c%83%e5%88%b6%e8%ae%a2%e8%af%b4%e6%98%8e">&lt;/a>
&lt;/h2>&lt;h3 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h3>&lt;p>基于华为C语言编程规范 
&lt;a href="https://ilcc.gitbooks.io/wiki/content/StyleGuide/Huawei-C/index.html" title="在线wiki文档" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 在线wiki文档
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p>
&lt;h3 id="代码总体原则">代码总体原则
&lt;a class="header-anchor" href="#%e4%bb%a3%e7%a0%81%e6%80%bb%e4%bd%93%e5%8e%9f%e5%88%99">&lt;/a>
&lt;/h3>&lt;h4 id="清晰第一">清晰第一
&lt;a class="header-anchor" href="#%e6%b8%85%e6%99%b0%e7%ac%ac%e4%b8%80">&lt;/a>
&lt;/h4>&lt;p>&lt;strong>代码的可阅读性高于性能，只有确定性能是瓶颈时，才应该主动优化&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>优秀的代码可以自我解释（以我的水平可能做到比较难）&lt;/li>
&lt;li>常写注释，并且注释写的清晰&lt;/li>
&lt;/ul>
&lt;h4 id="简洁为美">简洁为美
&lt;a class="header-anchor" href="#%e7%ae%80%e6%b4%81%e4%b8%ba%e7%be%8e">&lt;/a>
&lt;/h4>&lt;p>&lt;strong>写的代码越多，意味着出错的地方越多，也就意味着代码的可靠性越低。&lt;/strong>&lt;/p></description></item><item><title>物联网协议基础</title><link>/post/%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</link><pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate><guid>/post/%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</guid><description>&lt;h2 id="mqtt消息队列遥测传输协议">MQTT（消息队列遥测传输协议）
&lt;a class="header-anchor" href="#mqtt%e6%b6%88%e6%81%af%e9%98%9f%e5%88%97%e9%81%a5%e6%b5%8b%e4%bc%a0%e8%be%93%e5%8d%8f%e8%ae%ae">&lt;/a>
&lt;/h2>&lt;p>MQTT是轻量级的消息发布/订阅协议，设计用于资源受限的设备和低带宽、高延迟的网络环境。它已成为物联网领域的事实标准，广泛应用于智能家居、工业自动化等领域。&lt;/p></description></item></channel></rss>