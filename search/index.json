[{"content":"Hugo 是用 Go 实现的博客工具，采用 Markdown 进行文章编辑，自动生成静态站点文件，支持丰富的主题配置，也可以通过 js 嵌入像是评论系统等插件，高度定制化。除了 Hugo 外， 还有 Jekyll(github page默认)、Gatsby、Hexo、Ghost 等选择，实现和使用都差不多，可以根据自己的偏好进行选择。\n安装 Hugo 在ubuntu24.04 LTS环境下到 Hugo Releases 下载对应的deb包(注意安装extend版本，许多第三方主题需要extend依赖)，安装完成后，使用以下命令进行验证：\n1 hugo version 创建 Hugo 网站 通过上述命令安装 hugo 程序后，就可以通过 hugo new site 命令进行网站创建、配置与本地调试了，如希望生成到 /path/to/site 路径：\n1 $ hugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进去目录：\n1 $ cd /path/to/site 站点目录结构：\n1 2 3 4 5 6 7 8 9 . ├── archetypes: default.md是生成博文的模版 ├── assets # 存放被 Hugo Pipes 处理的文件 ├── content # 存放markdown文件作为博文内容 ├── data # 存放 Hugo 处理的数据 ├── layouts # 存放布局文件 ├── static # 存放静态文件 图片 CSS JS文件 ├── themes: 存放不同的主题 └── config.toml: 博客配置文件支持 JSON YAML TOML 三种格式配置文件 创建文章 创建一个 about 页面：\n1 $ hugo new about.md about.md 自动生成到了 content/about.md ，打开 about.md 看下：\n1 2 3 4 5 6 7 8 +++ date = \u0026#34;2015-10-25T08:36:54-07:00\u0026#34; draft = true title = \u0026#34;about\u0026#34; +++ 正文内容 内容是 Markdown 格式的，+++ 之间的内容是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n创建第一篇文章，放到 content/post 目录，方便之后生成聚合页面。\n1 $ hugo new post/first.md 打开编辑 content/post/first.md ：\n1 2 3 4 5 6 7 8 9 10 11 --- date: \u0026#34;2015-10-25T08:36:54-07:00\u0026#34; title: \u0026#34;first\u0026#34; --- ### Hello Hugo 1. aaa 1. bbb 1. ccc 注意此项为可选步骤，跳过可直接copy他人主题\n配置主题 当通过上文命令创建我们的站点后，需要进行主题配置，Hugo 社区有了很丰富的主题，可以通过官网 Themes 菜单选择自己喜欢的风格，查看预览效果，选择后可以进入主题项目的github仓库，一般人气多的主题都会有很详细的安装及配置说明。\n传统方式使用的是将原主题仓库 fork 到自己的账户，并使用 git submodule 方式进行仓库链接，这样后续可以对主题的修改进行单独维护。\n1 2 3 cd cita-site/#进入网站工程根目录 git init git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack#笔者所用主题为stack，此行与你所选主题有关 然后在根目录下的 config.toml文件中添加新的一行:\n1 theme = \u0026#34;your_theme\u0026#34; 此时大多数主题仓库提供example文件，你可以拷贝至你的工程根目录下，主要是content与config文件，之后就能进行下一步，如有问题建议查看主题提供的参考手册。\n生成网页 为了查看生成的博客的效果，我们在本地编辑调试时可以通过 hugo server 命令进行本地实时调试预览，无须每次都重新生成。在bash中运行以下命令，即我们可以通过浏览器 http://localhost:1313/ 地址访问我们的本地预览网页。\n1 hugo server 但此时只能在本地访问，如果想发布到 Github Pages ， 还需要借助 GithubPages 工具。\nGithub Pages部署 假设你需要部署在 GitHub Pages 上，首先在GitHub上创建一个Repository，命名为：coderzh.github.io （coderzh替换为你的github用户名）。站点目录config.toml中baseURL要换成自己建立的仓库，如baseURL = “https://cita-777.github.io/\u0026quot;\n在站点根目录执行 Hugo 命令生成最终页面：\n1 $ hugo --theme=hyde --baseURL=\u0026#34;http://coderzh.github.io/\u0026#34; 如果一切顺利，所有静态页面都会生成到 public 目录，将pubilc目录里所有文件 push 到刚创建的Repository的 master 分支。\n1 2 3 4 5 6 $ cd public $ git init $ git remote add origin https://github.com/coderzh/coderzh.github.io.git $ git add -A $ git commit -m \u0026#34;first commit\u0026#34; $ git push -u origin master 浏览器里访问：http://coderzh.github.io/\n注意必须只上传public中的所有文件，若无法使用密钥则使用ssh鉴定身份(git remote set-url origin git@github.com:cita-777/cita-777.github.io.git)，目前github默认主分支为main，建议设置里改为master\n后续修改网页 对content和config进行自行随意修改后需要重新上传至github仓库同步更新。命令如下：\n1 2 3 4 5 6 cd cita-site #进入网页工程文件 hugo --theme=hugo-theme-stack --baseURL=\u0026#34;http://cita-777.github.io/\u0026#34; #重新构建public文件静态网页 cd public #进入public文件内 git add -A #提交all变动 git commit -m \u0026#34;修改/更新了xxx\u0026#34; git push -u origin master #push到远程仓库 (进阶)Github Action 自动发布 通过前面的操作我们可以手动发布我们的静态文件，但还是有以下弊端：\n发布步骤还是比较繁琐，本地调试后还需要切换到 public/ 目录进行上传 无法对博客 .md 源文件进行备份与版本管理 因此，我们需要简单顺滑的方式来进行博客发布，首先我们初始化博客源文件的仓库，如我的仓库为 pseudoyu/yu-blog。\n因为我们的博客基于 GitHub 与 GitHub Pages，可以通过官方提供的 GitHub Action 进行 CI 自动发布，下面我会进行详细讲解。GitHub Action 是一个持续集成和持续交付(CI/CD) 平台，可用于自动执行构建、测试和部署管道，目前已经有很多开发好的工作流，可以通过简单的配置即可直接使用。\n配置在仓库目录 .github/workflows 下，以 .yml 为后缀。我的 GitHub Action 配置为 pseudoyu/yu-blog deploy.yml，自动发布示例配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy on: push: workflow_dispatch: schedule: # Runs everyday at 8:00 AM - cron: \u0026#34;0 0 * * *\u0026#34; jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build Web run: hugo - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} EXTERNAL_REPOSITORY: pseudoyu/pseudoyu.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: ${{ github.event.head_commit.message }} on 表示 GitHub Action 触发条件，我设置了 push、workflow_dispatch 和 schedule 三个条件：\npush，当这个项目仓库发生推送动作后，执行 GitHub Action workflow_dispatch，可以在 GitHub 项目仓库的 Action 工具栏进行手动调用 schedule，定时执行 GitHub Action，如我的设置为北京时间每天早上执行，主要是使用一些自动化统计 CI 来自动更新我博客的关于页面，如本周编码时间，影音记录等，如果你不需要定时功能，可以删除这个条件 jobs 表示 GitHub Action 中的任务，我们设置了一个 build 任务，runs-on 表示 GitHub Action 运行环境，我们选择了 ubuntu-latest。我们的 build 任务包含了 Checkout、Setup Hugo、Build Web 和 Deploy Web 四个主要步骤，其中 run 是执行的命令，uses 是 GitHub Action 中的一个插件，我们使用了 peaceiris/actions-hugo@v2 和 peaceiris/actions-gh-pages@v3 这两个插件。其中 Checkout 步骤中 with 中配置 submodules 值为 true 可以同步博客源仓库的子模块，即我们的主题模块。\n首先需要将上述 deploy.yml 中的 EXTERNAL_REPOSITORY 改为自己的 GitHub Pages 仓库，如我的设置为 pseudoyu/pseudoyu.github.io。\n因为我们需要从博客仓库推送到外部 GitHub Pages 仓库，需要特定权限，要在 GitHub 账户下 Setting - Developer setting - Personal access tokens 下创建一个 Token。\n","date":"2024-10-06T00:00:00Z","image":"http://localhost:1313/p/hugo-github-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E4%BD%9C%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu9262121530157302112.jpg","permalink":"http://localhost:1313/p/hugo-github-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E4%BD%9C%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/","title":"Hugo+Github Pages搭建静态网站作为个人博客(1)"},{"content":"上一篇博客中重点于Hugo的使用，这一篇着重于以Stack主题为例进行博客撰写。\nStack is a simple card-style Hugo theme designed for Bloggers. Here are some of the features: Stack 是一个简单的卡片式 Hugo 主题，专为 Blogger 设计。以下是一些功能：\nResponsive images support 响应式图像支持 Lazy load images 延迟加载图像 Dark mode 深色模式 Local search 本地搜索 PhotoSwipe integration 照片滑动集成 Archive page template 存档页面模板 Full native JavaScript, no jQuery or any other frameworks are used 完全原生 JavaScript，不使用 jQuery 或任何其他框架 No CSS framework, keep it simple and minimal 没有 CSS 框架，保持简单和最小化 Properly cropped thumbnails 正确裁剪的缩略图 Subsection support 分段支持 Table of contents 目录 Hugo网站文件结构 网站根目录下面的文件夹目录树一般如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 . ├── archetypes │ └── default.md ├── hugo.yaml # 网站配置文件 ├── content # 站点内的内容都在这里 │ ├── categories # “分类”页面的首页 │ │ └── Test # “分类”页面下的一个分类页面 │ ├── page # 显示在网站主页左侧边栏菜单的选项 │ │ ├── about # 左侧边栏菜单中的“关于”页面 │ │ ├── archives # 左侧边栏菜单中的“归档”页面 │ │ ├── links # 左侧边栏菜单中的“链接”页面 │ │ └── search # 左侧边栏菜单中的“搜索”页面 │ └── post # 用户写的帖子都放在这里，每个子文件夹对应一个帖子 │ ├── chinese-test │ ├── emoji-support │ ├── markdown-syntax │ ├── math-typesetting │ ├── placeholder-text │ └── rich-content ├── data ├── layouts ├── LICENSE ├── README.md ├── resources │ └── _gen │ ├── assets │ └── images ├── static # 放用户自定义字体、用户头像、网站小图标等 └── themes # 放各种主题 └── hugo-theme-stack # stack主题 ├── archetypes ├── assets #里面有个img存放头像图片位置 ├── config.yaml #stack主题的配置文件，优先级低于上面的网站配置文件 ├── data ├── debug.sh ├── exampleSite ├── go.mod ├── i18n #多语言支持包 ├── images #网站示例的截图存放位置 ├── layouts ├── LICENSE ├── netlify.toml ├── README.md └── theme.toml 主要修改主题内和网站内的config.yaml，具体含义可见官方手册。\n此外，上面没有显示的是网站根目录下的private文件夹和public文件夹。\npublic文件夹会在运行hugo -D部署网站时生成，是暴露给外界的文件夹，网站上页面的HTML文件都会由Hugo生成并放在public文件夹下。public文件夹内不要放置任何包含用户信息的敏感文件！ private文件夹可以由用户创建，这里我们用它来存放网站的SSL证书。 关于网站根目录下各文件夹，更详细的说明可参见Hugo官方文档。\n配置文件夹config Hugo支持两种配置方式：\n一种是直接在网站根目录的.config文件中配置 另一种是在网站根目录下创建config文件夹，配置放在config文件夹内 第二种配置方式支持将不同的配置项分开放在不同的文件中，相比第一种配置方式可以让配置项的条理更加清晰，因此我们这里选择第二种配置方式。参考配置目录结构如下所示：\n1 2 3 4 5 6 7 8 config └── _default ├── config.yaml ├── languages.yaml ├── menu.en.yaml ├── menu.zh-cn.yaml ├── params.en.yaml └── params.zh-cn.yaml 关于Hugo的配置，更详细的说明可参考官方文档。\n[附录1]主题内config.yaml各参数简明含义 Module (模块设置)\nhugoVersion\n: 定义Hugo版本要求。\nextended: 设置为true表示需要Hugo的扩展版本（支持SCSS和其他高级功能）。 min: 需要的最低Hugo版本为0.87.0。 Params (参数设置)\nmainSections: 定义主要的内容部分，这里是post，也就是文章部分。 featuredImageField: 文章中用于展示特色图片的字段名称，默认为image。 rssFullContent: RSS中是否提供文章的完整内容，true表示是。 Favicon (网站图标)\nfavicon: 设置网站的favicon路径，如果有一个favicon.ico，可以设置为/favicon.ico。 Footer (页脚)\nsince: 页脚中显示的年份（通常是网站开始的年份），这个字段为空，可以填入年份，如“2024”。 customText: 页脚自定义文本，当前为空，可以填写你想显示的内容。 Date Format (日期格式)\npublished: 发布日期的显示格式，这里格式为Jan 02, 2006。 lastUpdated: 最后更新日期的显示格式，这里包括日期和时间。 Sidebar (侧边栏)\ncompact: 是否使用紧凑布局，false表示不使用紧凑布局。\nemoji: 表情符号，可以为空或者自定义一个表情符号显示在侧边栏上。\nsubtitle: 侧边栏的副标题，当前为空，可以添加文字。\navatar\n: 头像设置。\nenabled: 是否显示头像，true表示显示。 local: true表示头像从本地文件加载。 src: 头像的路径为img/avatar.png。 Article (文章设置)\nheadingAnchor: 设置是否在标题旁边显示锚点，false表示不显示。\nmath: 是否支持数学公式，false表示不支持。\ntoc: 目录设置，true表示显示文章目录。\nreadingTime: 是否显示阅读时间，true表示显示。\nlicense\n: 文章版权设置。\nenabled: 是否启用版权声明，false表示不启用。 default: 默认的版权声明，当前设置为“Creative Commons BY-NC-SA 4.0”，但没有启用。 Comments (评论系统)\nenabled: 是否启用评论，false表示不启用。 provider: 默认评论提供者是disqus。 配置了多个评论系统，包括disqusjs, utterances, beaudar, remark42, vssue等。每个评论系统都有自己的设置项，例如Disqus、GitHub Issues（通过utterances）、Beaudar等。这些可以根据需要选择，并填入相关参数，如API密钥、仓库名称等。 Widgets (小工具)\nhomepage: 主页上的小工具列表，当前为空，也就是说默认没有显示任何小工具。 page: 页面上的小工具列表，当前为空。 OpenGraph (社交分享卡片)\ntwitter\n: 配置Twitter分享卡片。\nsite: 填写你的Twitter用户名。 card: 卡片类型，这里是summary_large_image，表示大图片的分享卡片。 DefaultImage (默认图片)\nopengraph\n: 配置默认图片的设置。\nenabled: 是否启用OpenGraph图片，false表示不启用。 local: 图片是否为本地图片，false表示不是本地图片。 src: 默认图片的路径。 ColorScheme (颜色主题)\ntoggle: 是否允许用户切换颜色主题（比如暗黑模式），true表示启用切换功能。 default: 默认颜色主题，这里是auto，表示根据用户系统的设置自动切换。 ImageProcessing (图片处理)\ncover: 是否启用封面图片处理，true表示启用。 content: 是否启用内容图片处理，true表示启用。 [附录2]官方示例提供的根目录内hugo.yaml各参数简明含义 基本信息\nbaseurl: 网站的基础URL。 languageCode: 默认语言代码，例如en-us表示英语（美国）。 theme: 使用的主题，在这里是hugo-theme-stack。 title: 网站的标题。 copyright: 网站的版权声明。 语言支持\nDefaultContentLanguage: 设置默认的语言为英语（en）。 hasCJKLanguage: 如果网站主要使用中文、日文或韩文等CJK（中日韩）语言，这个值应设为true，用于正确处理文章摘要和字数统计。 languages: 你可以为网站配置多语言支持。在这个例子中，网站支持英语（en）、中文简体（zh-cn）和阿拉伯语（ar）。每种语言可以有独立的标题和描述。 服务设置\ndisqus: 用于网站评论的服务，Disqus是一个流行的评论系统。如果要启用评论，需要更改为你自己的网站短名称。 googleAnalytics: 如果你使用Google Analytics（谷歌分析）进行流量统计，可以在这里填入你的追踪ID。 分页和永久链接\npagination: 设置分页大小为3，也就是说每页显示3篇文章。 permalinks: 自定义文章和页面的永久链接结构。例如，文章会显示为/p/:slug/。 页面参数\nparams: 包含各种网站布局、显示和功能的配置。比如文章是否显示数学公式、阅读时间、许可信息等。 评论功能\ncomments: 你可以选择不同的评论提供者（如Disqus、Utterances、Gitalk等），通过填入相关的配置信息来启用评论。 菜单和小工具\nmenu: 自定义网站菜单和社交链接。这里包括GitHub和Twitter的社交图标链接。 widgets: 配置主页和页面上的小工具，例如搜索栏、文章归档、标签云等。 其他配置\nopengraph: 配置网站在社交平台（如Twitter）的分享卡片。 colorScheme: 配置网站的颜色模式（自动、浅色或深色）。 imageProcessing: 图片处理选项，例如封面图片和内容图片。 相关内容\nrelated: 配置文章之间的相关性推荐，基于标签和分类等条件。 Markdown 渲染\nmarkup: 配置如何处理Markdown内容，例如表格、代码高亮、目录等。 两篇附录仅供参考，可能有错误\n","date":"2024-10-06T00:00:00Z","image":"http://localhost:1313/p/hugo-github-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E4%BD%9C%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu9262121530157302112.jpg","permalink":"http://localhost:1313/p/hugo-github-pages%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E4%BD%9C%E4%B8%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/","title":"Hugo+Github Pages搭建静态网站作为个人博客(2)"},{"content":"长沙 宣城 合肥 桂林 ","date":"2024-10-06T00:00:00Z","image":"http://localhost:1313/p/tim-cnt-1/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"http://localhost:1313/p/tim-cnt-1/","title":"TIM -\u003e CNT= -1"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]